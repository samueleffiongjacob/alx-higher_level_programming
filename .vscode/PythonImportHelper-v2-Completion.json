[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "this",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "this",
        "description": "this",
        "detail": "this",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "importPath": "models.rectangle",
        "description": "models.rectangle",
        "isExtraImport": true,
        "detail": "models.rectangle",
        "documentation": {}
    },
    {
        "label": "Square",
        "importPath": "models.square",
        "description": "models.square",
        "isExtraImport": true,
        "detail": "models.square",
        "documentation": {}
    },
    {
        "label": "Square",
        "importPath": "models.square",
        "description": "models.square",
        "isExtraImport": true,
        "detail": "models.square",
        "documentation": {}
    },
    {
        "label": "Square",
        "importPath": "models.square",
        "description": "models.square",
        "isExtraImport": true,
        "detail": "models.square",
        "documentation": {}
    },
    {
        "label": "Square",
        "importPath": "models.square",
        "description": "models.square",
        "isExtraImport": true,
        "detail": "models.square",
        "documentation": {}
    },
    {
        "label": "Square",
        "importPath": "models.square",
        "description": "models.square",
        "isExtraImport": true,
        "detail": "models.square",
        "documentation": {}
    },
    {
        "label": "Square",
        "importPath": "models.square",
        "description": "models.square",
        "isExtraImport": true,
        "detail": "models.square",
        "documentation": {}
    },
    {
        "label": "Square",
        "importPath": "models.square",
        "description": "models.square",
        "isExtraImport": true,
        "detail": "models.square",
        "documentation": {}
    },
    {
        "label": "Square",
        "importPath": "models.square",
        "description": "models.square",
        "isExtraImport": true,
        "detail": "models.square",
        "documentation": {}
    },
    {
        "label": "Square",
        "importPath": "models.square",
        "description": "models.square",
        "isExtraImport": true,
        "detail": "models.square",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "MySQLdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "MySQLdb",
        "description": "MySQLdb",
        "detail": "MySQLdb",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "model_state",
        "description": "model_state",
        "isExtraImport": true,
        "detail": "model_state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "model_state",
        "description": "model_state",
        "isExtraImport": true,
        "detail": "model_state",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "model_state",
        "description": "model_state",
        "isExtraImport": true,
        "detail": "model_state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "model_state",
        "description": "model_state",
        "isExtraImport": true,
        "detail": "model_state",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "model_state",
        "description": "model_state",
        "isExtraImport": true,
        "detail": "model_state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "model_state",
        "description": "model_state",
        "isExtraImport": true,
        "detail": "model_state",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "model_state",
        "description": "model_state",
        "isExtraImport": true,
        "detail": "model_state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "model_state",
        "description": "model_state",
        "isExtraImport": true,
        "detail": "model_state",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "sqlalchemy.engine.url",
        "description": "sqlalchemy.engine.url",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine.url",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "sqlalchemy.engine.url",
        "description": "sqlalchemy.engine.url",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine.url",
        "documentation": {}
    },
    {
        "label": "URL",
        "importPath": "sqlalchemy.engine.url",
        "description": "sqlalchemy.engine.url",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine.url",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "relationship_state",
        "description": "relationship_state",
        "isExtraImport": true,
        "detail": "relationship_state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "relationship_state",
        "description": "relationship_state",
        "isExtraImport": true,
        "detail": "relationship_state",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "relationship_state",
        "description": "relationship_state",
        "isExtraImport": true,
        "detail": "relationship_state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "relationship_state",
        "description": "relationship_state",
        "isExtraImport": true,
        "detail": "relationship_state",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "relationship_state",
        "description": "relationship_state",
        "isExtraImport": true,
        "detail": "relationship_state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "relationship_state",
        "description": "relationship_state",
        "isExtraImport": true,
        "detail": "relationship_state",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "relationship_state",
        "description": "relationship_state",
        "isExtraImport": true,
        "detail": "relationship_state",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "relationship_state",
        "description": "relationship_state",
        "isExtraImport": true,
        "detail": "relationship_state",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "relationship_city",
        "description": "relationship_city",
        "isExtraImport": true,
        "detail": "relationship_city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "relationship_city",
        "description": "relationship_city",
        "isExtraImport": true,
        "detail": "relationship_city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "relationship_city",
        "description": "relationship_city",
        "isExtraImport": true,
        "detail": "relationship_city",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy.sql.schema",
        "description": "sqlalchemy.sql.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.schema",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy.sql.schema",
        "description": "sqlalchemy.sql.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.schema",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "magic_calculation",
        "kind": 2,
        "importPath": "0x00-python-hello_world.102-magic_calculation",
        "description": "0x00-python-hello_world.102-magic_calculation",
        "peekOfCode": "def magic_calculation(a, b):\n    return(98 + a ** b)\n# https://docs.python.org/3.4/library/dis.html",
        "detail": "0x00-python-hello_world.102-magic_calculation",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "0x00-python-hello_world.3-print_number",
        "description": "0x00-python-hello_world.3-print_number",
        "peekOfCode": "number = 98\nprint(f\"{number:d} Battery street\")",
        "detail": "0x00-python-hello_world.3-print_number",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "0x00-python-hello_world.4-print_float",
        "description": "0x00-python-hello_world.4-print_float",
        "peekOfCode": "number = 3.14159\n#print(\"Float: {0:.2f}\".format(number))\n#0r\n# number = 3.14159\n# print(f\"Float: {number:.2f}\")\nprint(f\"Float: {number:.2f}\")",
        "detail": "0x00-python-hello_world.4-print_float",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "0x00-python-hello_world.5-print_string",
        "description": "0x00-python-hello_world.5-print_string",
        "peekOfCode": "str = \"Holberton School\"\n#print(\"{}\".format(str) * 3)\n#print(str[:9])\"\nprint(3 * str)\nprint(str[:9])",
        "detail": "0x00-python-hello_world.5-print_string",
        "documentation": {}
    },
    {
        "label": "str1",
        "kind": 5,
        "importPath": "0x00-python-hello_world.6-concat",
        "description": "0x00-python-hello_world.6-concat",
        "peekOfCode": "str1 = \"Holberton\"\nstr2 = \"School\"\nstr1 = str1 + ' ' + str2\nprint(f\"Welcome to {str1}!\")\n# wc -l 6-concat.py\n#performing some operation",
        "detail": "0x00-python-hello_world.6-concat",
        "documentation": {}
    },
    {
        "label": "str2",
        "kind": 5,
        "importPath": "0x00-python-hello_world.6-concat",
        "description": "0x00-python-hello_world.6-concat",
        "peekOfCode": "str2 = \"School\"\nstr1 = str1 + ' ' + str2\nprint(f\"Welcome to {str1}!\")\n# wc -l 6-concat.py\n#performing some operation",
        "detail": "0x00-python-hello_world.6-concat",
        "documentation": {}
    },
    {
        "label": "str1",
        "kind": 5,
        "importPath": "0x00-python-hello_world.6-concat",
        "description": "0x00-python-hello_world.6-concat",
        "peekOfCode": "str1 = str1 + ' ' + str2\nprint(f\"Welcome to {str1}!\")\n# wc -l 6-concat.py\n#performing some operation",
        "detail": "0x00-python-hello_world.6-concat",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "0x00-python-hello_world.7-edges",
        "description": "0x00-python-hello_world.7-edges",
        "peekOfCode": "word = \"Holberton\"\nword_first_3 = word[0:3]\nword_last_2 = word[-2:]\nmiddle_word = word[1:-1]\nprint(\"First 3 letters: {}\".format(word_first_3))\nprint(\"Last 2 letters: {}\".format(word_last_2))\nprint(\"Middle word: {}\".format(middle_word))",
        "detail": "0x00-python-hello_world.7-edges",
        "documentation": {}
    },
    {
        "label": "word_first_3",
        "kind": 5,
        "importPath": "0x00-python-hello_world.7-edges",
        "description": "0x00-python-hello_world.7-edges",
        "peekOfCode": "word_first_3 = word[0:3]\nword_last_2 = word[-2:]\nmiddle_word = word[1:-1]\nprint(\"First 3 letters: {}\".format(word_first_3))\nprint(\"Last 2 letters: {}\".format(word_last_2))\nprint(\"Middle word: {}\".format(middle_word))",
        "detail": "0x00-python-hello_world.7-edges",
        "documentation": {}
    },
    {
        "label": "word_last_2",
        "kind": 5,
        "importPath": "0x00-python-hello_world.7-edges",
        "description": "0x00-python-hello_world.7-edges",
        "peekOfCode": "word_last_2 = word[-2:]\nmiddle_word = word[1:-1]\nprint(\"First 3 letters: {}\".format(word_first_3))\nprint(\"Last 2 letters: {}\".format(word_last_2))\nprint(\"Middle word: {}\".format(middle_word))",
        "detail": "0x00-python-hello_world.7-edges",
        "documentation": {}
    },
    {
        "label": "middle_word",
        "kind": 5,
        "importPath": "0x00-python-hello_world.7-edges",
        "description": "0x00-python-hello_world.7-edges",
        "peekOfCode": "middle_word = word[1:-1]\nprint(\"First 3 letters: {}\".format(word_first_3))\nprint(\"Last 2 letters: {}\".format(word_last_2))\nprint(\"Middle word: {}\".format(middle_word))",
        "detail": "0x00-python-hello_world.7-edges",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "0x00-python-hello_world.8-concat_edges",
        "description": "0x00-python-hello_world.8-concat_edges",
        "peekOfCode": "str = \"Python is an interpreted, interactive, object-oriented programming\\\n language that combines remarkable power with very clear syntax\"\nstr = str[39:67] + str[107:112] + str[:6]\nprint(str)",
        "detail": "0x00-python-hello_world.8-concat_edges",
        "documentation": {}
    },
    {
        "label": "str",
        "kind": 5,
        "importPath": "0x00-python-hello_world.8-concat_edges",
        "description": "0x00-python-hello_world.8-concat_edges",
        "peekOfCode": "str = str[39:67] + str[107:112] + str[:6]\nprint(str)",
        "detail": "0x00-python-hello_world.8-concat_edges",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "0x01-python-if_else_loops_functions.0-positive_or_negative",
        "description": "0x01-python-if_else_loops_functions.0-positive_or_negative",
        "peekOfCode": "number = random.randint(-10, 10)\nif number > 0:\n    print(number, \"is positive\")\nelif number == 0:\n    print(number, \"is zero\")\nelif number < 0:\n    print(number, \"is negative\")",
        "detail": "0x01-python-if_else_loops_functions.0-positive_or_negative",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "0x01-python-if_else_loops_functions.1-last_digit",
        "description": "0x01-python-if_else_loops_functions.1-last_digit",
        "peekOfCode": "number = random.randint(-10000, 10000)\nif number < 0:\n    ldigit = -number % 10\n    ldigit = -ldigit\nelse:\n    ldigit = number % 10\nif ldigit > 5:\n    print(\"Last digit of {} is {} and is greater \\\nthan 5\".format(number, ldigit))\nelif ldigit < 6 and ldigit != 0:",
        "detail": "0x01-python-if_else_loops_functions.1-last_digit",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "0x01-python-if_else_loops_functions.10-add",
        "description": "0x01-python-if_else_loops_functions.10-add",
        "peekOfCode": "def add(a, b):\n    return a + b",
        "detail": "0x01-python-if_else_loops_functions.10-add",
        "documentation": {}
    },
    {
        "label": "strtmp",
        "kind": 5,
        "importPath": "0x01-python-if_else_loops_functions.100-print_tebahpla",
        "description": "0x01-python-if_else_loops_functions.100-print_tebahpla",
        "peekOfCode": "strtmp = \"\"\nfor i in reversed(range(97, 123)):\n    if (i % 2) == 0:\n        strtmp += chr(i)\n    else:\n        strtmp += chr(i-32)\nprint(\"{}\".format(strtmp), end=\"\")",
        "detail": "0x01-python-if_else_loops_functions.100-print_tebahpla",
        "documentation": {}
    },
    {
        "label": "remove_char_at",
        "kind": 2,
        "importPath": "0x01-python-if_else_loops_functions.101-remove_char_at",
        "description": "0x01-python-if_else_loops_functions.101-remove_char_at",
        "peekOfCode": "def remove_char_at(str, n):\n    strtmp = \"\"\n    cont = 0\n    for c in str:\n        if cont == n:\n            pass\n        else:\n            strtmp += c\n        cont += 1\n    return strtmp",
        "detail": "0x01-python-if_else_loops_functions.101-remove_char_at",
        "documentation": {}
    },
    {
        "label": "magic_calculation",
        "kind": 2,
        "importPath": "0x01-python-if_else_loops_functions.102-magic_calculation",
        "description": "0x01-python-if_else_loops_functions.102-magic_calculation",
        "peekOfCode": "def magic_calculation(a, b, c):\n    if a < b:\n        return c\n    if c > b:\n        return a + b\n    return (a * b) - c",
        "detail": "0x01-python-if_else_loops_functions.102-magic_calculation",
        "documentation": {}
    },
    {
        "label": "pow",
        "kind": 2,
        "importPath": "0x01-python-if_else_loops_functions.11-pow",
        "description": "0x01-python-if_else_loops_functions.11-pow",
        "peekOfCode": "def pow(a, b):\n    return a ** b",
        "detail": "0x01-python-if_else_loops_functions.11-pow",
        "documentation": {}
    },
    {
        "label": "fizzbuzz",
        "kind": 2,
        "importPath": "0x01-python-if_else_loops_functions.12-fizzbuzz",
        "description": "0x01-python-if_else_loops_functions.12-fizzbuzz",
        "peekOfCode": "def fizzbuzz():\n    for i in range(1, 101):\n        if (i % 3) == 0 and (i % 5) == 0:\n            print(\"FizzBuzz\", end=\" \")\n        elif (i % 5) == 0:\n            print(\"Buzz\", end=\" \")\n        elif (i % 3) == 0:\n            print(\"Fizz\", end=\" \")\n        else:\n            if i != 99:",
        "detail": "0x01-python-if_else_loops_functions.12-fizzbuzz",
        "documentation": {}
    },
    {
        "label": "charend",
        "kind": 5,
        "importPath": "0x01-python-if_else_loops_functions.5-print_comb2",
        "description": "0x01-python-if_else_loops_functions.5-print_comb2",
        "peekOfCode": "charend = \", \"\nfor i in range(0, 100):\n    if i < 10:\n        print(\"{}{}\".format(0, i), end=charend)\n    else:\n        if i == 99:\n            charend = \"\\n\"\n        print(i, end=charend)",
        "detail": "0x01-python-if_else_loops_functions.5-print_comb2",
        "documentation": {}
    },
    {
        "label": "islower",
        "kind": 2,
        "importPath": "0x01-python-if_else_loops_functions.7-islower",
        "description": "0x01-python-if_else_loops_functions.7-islower",
        "peekOfCode": "def islower(c):\n    if ord(c) > 96 and ord(c) < 123:\n        return True\n    return False",
        "detail": "0x01-python-if_else_loops_functions.7-islower",
        "documentation": {}
    },
    {
        "label": "uppercase",
        "kind": 2,
        "importPath": "0x01-python-if_else_loops_functions.8-uppercase",
        "description": "0x01-python-if_else_loops_functions.8-uppercase",
        "peekOfCode": "def uppercase(str):\n    strtmp = \"\"\n    for c in str:\n        if ord(c) > 96 and ord(c) < 123:\n            strtmp += chr(ord(c)-32)\n        else:\n            strtmp += c\n    print(\"{}\".format(strtmp))",
        "detail": "0x01-python-if_else_loops_functions.8-uppercase",
        "documentation": {}
    },
    {
        "label": "print_last_digit",
        "kind": 2,
        "importPath": "0x01-python-if_else_loops_functions.9-print_last_digit",
        "description": "0x01-python-if_else_loops_functions.9-print_last_digit",
        "peekOfCode": "def print_last_digit(number):\n    if number < 0:\n        ldigit = -number % 10\n        ldigit = ldigit\n    else:\n        ldigit = number % 10\n    print(ldigit, end=\"\")\n    return (ldigit)",
        "detail": "0x01-python-if_else_loops_functions.9-print_last_digit",
        "documentation": {}
    },
    {
        "label": "magic_calculation",
        "kind": 2,
        "importPath": "0x02-python-import_modules.102-magic_calculation",
        "description": "0x02-python-import_modules.102-magic_calculation",
        "peekOfCode": "def magic_calculation(a, b):\n    from magic_calculation_102 import add, sub\n    if a < b:\n        c = add(a, b)\n        for i in range(4, 6):\n            c = add(c, i)\n        return c\n    else:\n        return(sub(a, b))",
        "detail": "0x02-python-import_modules.102-magic_calculation",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "0x02-python-import_modules.calculator_1",
        "description": "0x02-python-import_modules.calculator_1",
        "peekOfCode": "def add(a, b):\n    \"\"\"My addition function\n    Args:\n        a: first integer\n        b: second integer\n    Returns:\n        The return value. a + b\n    \"\"\"\n    return (a + b)\ndef sub(a, b):",
        "detail": "0x02-python-import_modules.calculator_1",
        "documentation": {}
    },
    {
        "label": "sub",
        "kind": 2,
        "importPath": "0x02-python-import_modules.calculator_1",
        "description": "0x02-python-import_modules.calculator_1",
        "peekOfCode": "def sub(a, b):\n    \"\"\"My subtraction function\n    Args:\n        a: first integer\n        b: second integer\n    Returns:\n        The return value. a - b\n    \"\"\"\n    return (a - b)\ndef mul(a, b):",
        "detail": "0x02-python-import_modules.calculator_1",
        "documentation": {}
    },
    {
        "label": "mul",
        "kind": 2,
        "importPath": "0x02-python-import_modules.calculator_1",
        "description": "0x02-python-import_modules.calculator_1",
        "peekOfCode": "def mul(a, b):\n    \"\"\"My multiplication function\n    Args:\n        a: first integer\n        b: second integer\n    Returns:\n        The return value. a * b\n    \"\"\"\n    return (a * b)\ndef div(a, b):",
        "detail": "0x02-python-import_modules.calculator_1",
        "documentation": {}
    },
    {
        "label": "div",
        "kind": 2,
        "importPath": "0x02-python-import_modules.calculator_1",
        "description": "0x02-python-import_modules.calculator_1",
        "peekOfCode": "def div(a, b):\n    \"\"\"My division function\n    Args:\n        a: first integer\n        b: second integer\n    Returns:\n        The return value. a / b\n    \"\"\"\n    return int(a / b)",
        "detail": "0x02-python-import_modules.calculator_1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "0x02-python-import_modules.variable_load_5",
        "description": "0x02-python-import_modules.variable_load_5",
        "peekOfCode": "a = 98\n\"\"\"Simple variable\n\"\"\"",
        "detail": "0x02-python-import_modules.variable_load_5",
        "documentation": {}
    },
    {
        "label": "print_list_integer",
        "kind": 2,
        "importPath": "0x03-python-data_structures.0-print_list_integer",
        "description": "0x03-python-data_structures.0-print_list_integer",
        "peekOfCode": "def print_list_integer(my_list=[]):\n    for item in my_list:\n        print(\"{:d}\".format(item))",
        "detail": "0x03-python-data_structures.0-print_list_integer",
        "documentation": {}
    },
    {
        "label": "element_at",
        "kind": 2,
        "importPath": "0x03-python-data_structures.1-element_at",
        "description": "0x03-python-data_structures.1-element_at",
        "peekOfCode": "def element_at(my_list, idx):\n    if 0 <= idx < len(my_list):\n        return my_list[idx]\n    return None",
        "detail": "0x03-python-data_structures.1-element_at",
        "documentation": {}
    },
    {
        "label": "divisible_by_2",
        "kind": 2,
        "importPath": "0x03-python-data_structures.10-divisible_by_2",
        "description": "0x03-python-data_structures.10-divisible_by_2",
        "peekOfCode": "def divisible_by_2(my_list=[]):\n    new_list = [not i % 2 for i in my_list]\n    return (new_list)",
        "detail": "0x03-python-data_structures.10-divisible_by_2",
        "documentation": {}
    },
    {
        "label": "delete_at",
        "kind": 2,
        "importPath": "0x03-python-data_structures.11-delete_at",
        "description": "0x03-python-data_structures.11-delete_at",
        "peekOfCode": "def delete_at(my_list=[], idx=0):\n    if 0 <= idx < len(my_list):\n        del my_list[idx]\n    return my_list",
        "detail": "0x03-python-data_structures.11-delete_at",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "0x03-python-data_structures.12-switch",
        "description": "0x03-python-data_structures.12-switch",
        "peekOfCode": "a = 89\nb = 10\na, b = b, a\nprint(\"a={:d} - b={:d}\".format(a, b))",
        "detail": "0x03-python-data_structures.12-switch",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "0x03-python-data_structures.12-switch",
        "description": "0x03-python-data_structures.12-switch",
        "peekOfCode": "b = 10\na, b = b, a\nprint(\"a={:d} - b={:d}\".format(a, b))",
        "detail": "0x03-python-data_structures.12-switch",
        "documentation": {}
    },
    {
        "label": "replace_in_list",
        "kind": 2,
        "importPath": "0x03-python-data_structures.2-replace_in_list",
        "description": "0x03-python-data_structures.2-replace_in_list",
        "peekOfCode": "def replace_in_list(my_list, idx, element):\n    if 0 <= idx < len(my_list):\n        my_list[idx] = element\n    return my_list",
        "detail": "0x03-python-data_structures.2-replace_in_list",
        "documentation": {}
    },
    {
        "label": "print_reversed_list_integer",
        "kind": 2,
        "importPath": "0x03-python-data_structures.3-print_reversed_list_integer",
        "description": "0x03-python-data_structures.3-print_reversed_list_integer",
        "peekOfCode": "def print_reversed_list_integer(my_list=[]):\n    if my_list:\n        for item in my_list[::-1]:\n            print(\"{:d}\".format(item))",
        "detail": "0x03-python-data_structures.3-print_reversed_list_integer",
        "documentation": {}
    },
    {
        "label": "new_in_list",
        "kind": 2,
        "importPath": "0x03-python-data_structures.4-new_in_list",
        "description": "0x03-python-data_structures.4-new_in_list",
        "peekOfCode": "def new_in_list(my_list, idx, element):\n    new_list = my_list.copy()\n    if 0 <= idx < len(new_list):\n        new_list[idx] = element\n    return new_list",
        "detail": "0x03-python-data_structures.4-new_in_list",
        "documentation": {}
    },
    {
        "label": "no_c",
        "kind": 2,
        "importPath": "0x03-python-data_structures.5-no_c",
        "description": "0x03-python-data_structures.5-no_c",
        "peekOfCode": "def no_c(my_string):\n    new_string = \"\"\n    for c in my_string:\n        if c not in \"Cc\":\n            new_string += c\n    return new_string",
        "detail": "0x03-python-data_structures.5-no_c",
        "documentation": {}
    },
    {
        "label": "print_matrix_integer",
        "kind": 2,
        "importPath": "0x03-python-data_structures.6-print_matrix_integer",
        "description": "0x03-python-data_structures.6-print_matrix_integer",
        "peekOfCode": "def print_matrix_integer(matrix=[[]]):\n    for row in matrix:\n        for col in range(len(row)):\n            print(\"{:d}\".format(row[col]),\n                  end=' ' if col < len(row) - 1 else '')\n        print()",
        "detail": "0x03-python-data_structures.6-print_matrix_integer",
        "documentation": {}
    },
    {
        "label": "add_tuple",
        "kind": 2,
        "importPath": "0x03-python-data_structures.7-add_tuple",
        "description": "0x03-python-data_structures.7-add_tuple",
        "peekOfCode": "def add_tuple(tuple_a=(), tuple_b=()):\n    tuple_a = tuple_a + (0, 0)\n    tuple_b = tuple_b + (0, 0)\n    return tuple_a[0] + tuple_b[0], tuple_a[1] + tuple_b[1]",
        "detail": "0x03-python-data_structures.7-add_tuple",
        "documentation": {}
    },
    {
        "label": "multiple_returns",
        "kind": 2,
        "importPath": "0x03-python-data_structures.8-multiple_returns",
        "description": "0x03-python-data_structures.8-multiple_returns",
        "peekOfCode": "def multiple_returns(sentence):\n    return len(sentence), sentence[0] if sentence else None",
        "detail": "0x03-python-data_structures.8-multiple_returns",
        "documentation": {}
    },
    {
        "label": "max_integer",
        "kind": 2,
        "importPath": "0x03-python-data_structures.9-max_integer",
        "description": "0x03-python-data_structures.9-max_integer",
        "peekOfCode": "def max_integer(my_list=[]):\n    if my_list:\n        imax = my_list[0]\n        for i in my_list:\n            if i > imax:\n                imax = i\n        return imax\n    return None",
        "detail": "0x03-python-data_structures.9-max_integer",
        "documentation": {}
    },
    {
        "label": "square_matrix_simple",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.0-square_matrix_simple",
        "description": "0x04-python-more_data_structures.0-square_matrix_simple",
        "peekOfCode": "def square_matrix_simple(matrix=[]):\n    return [[y ** 2 for y in x] for x in matrix]",
        "detail": "0x04-python-more_data_structures.0-square_matrix_simple",
        "documentation": {}
    },
    {
        "label": "search_replace",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.1-search_replace",
        "description": "0x04-python-more_data_structures.1-search_replace",
        "peekOfCode": "def search_replace(my_list, search, replace):\n    return [replace if num == search else num for num in my_list]",
        "detail": "0x04-python-more_data_structures.1-search_replace",
        "documentation": {}
    },
    {
        "label": "best_score",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.10-best_score",
        "description": "0x04-python-more_data_structures.10-best_score",
        "peekOfCode": "def best_score(a_dictionary):\n    return max(a_dictionary, key=a_dictionary.get) if a_dictionary else None",
        "detail": "0x04-python-more_data_structures.10-best_score",
        "documentation": {}
    },
    {
        "label": "weight_average",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.100-weight_average",
        "description": "0x04-python-more_data_structures.100-weight_average",
        "peekOfCode": "def weight_average(my_list=[]):\n    if my_list:\n        return sum(a * b for a, b in my_list) / sum(b for a, b in my_list)\n    return 0",
        "detail": "0x04-python-more_data_structures.100-weight_average",
        "documentation": {}
    },
    {
        "label": "square_matrix_map",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.101-square_matrix_map",
        "description": "0x04-python-more_data_structures.101-square_matrix_map",
        "peekOfCode": "def square_matrix_map(matrix=[]):\n    return list(map(lambda row: list(map(lambda i: i ** 2, row)), matrix))",
        "detail": "0x04-python-more_data_structures.101-square_matrix_map",
        "documentation": {}
    },
    {
        "label": "complex_delete",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.102-complex_delete",
        "description": "0x04-python-more_data_structures.102-complex_delete",
        "peekOfCode": "def complex_delete(a_dictionary, value):\n    for k, v in list(a_dictionary.items()):\n        if v is value:\n            a_dictionary.pop(k)\n    return a_dictionary",
        "detail": "0x04-python-more_data_structures.102-complex_delete",
        "documentation": {}
    },
    {
        "label": "multiply_list_map",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.11-multiply_list_map",
        "description": "0x04-python-more_data_structures.11-multiply_list_map",
        "peekOfCode": "def multiply_list_map(my_list=[], number=0):\n    return list(map(lambda i: i * number, my_list))",
        "detail": "0x04-python-more_data_structures.11-multiply_list_map",
        "documentation": {}
    },
    {
        "label": "roman_to_int",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.12-roman_to_int",
        "description": "0x04-python-more_data_structures.12-roman_to_int",
        "peekOfCode": "def roman_to_int(roman_string):\n    val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    res = 0\n    p = 0\n    if type(roman_string) is str and roman_string:\n        for c in range(len(roman_string) - 1, -1, -1):\n            if val[roman_string[c]] >= p:\n                res += val[roman_string[c]]\n            else:\n                res -= val[roman_string[c]]",
        "detail": "0x04-python-more_data_structures.12-roman_to_int",
        "documentation": {}
    },
    {
        "label": "uniq_add",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.2-uniq_add",
        "description": "0x04-python-more_data_structures.2-uniq_add",
        "peekOfCode": "def uniq_add(my_list=[]):\n    return sum(set(my_list))",
        "detail": "0x04-python-more_data_structures.2-uniq_add",
        "documentation": {}
    },
    {
        "label": "common_elements",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.3-common_elements",
        "description": "0x04-python-more_data_structures.3-common_elements",
        "peekOfCode": "def common_elements(set_1, set_2):\n    return set_1 & set_2",
        "detail": "0x04-python-more_data_structures.3-common_elements",
        "documentation": {}
    },
    {
        "label": "only_diff_elements",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.4-only_diff_elements",
        "description": "0x04-python-more_data_structures.4-only_diff_elements",
        "peekOfCode": "def only_diff_elements(set_1, set_2):\n    return set_1 ^ set_2",
        "detail": "0x04-python-more_data_structures.4-only_diff_elements",
        "documentation": {}
    },
    {
        "label": "number_keys",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.5-number_keys",
        "description": "0x04-python-more_data_structures.5-number_keys",
        "peekOfCode": "def number_keys(a_dictionary):\n    return len(a_dictionary)",
        "detail": "0x04-python-more_data_structures.5-number_keys",
        "documentation": {}
    },
    {
        "label": "print_sorted_dictionary",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.6-print_sorted_dictionary",
        "description": "0x04-python-more_data_structures.6-print_sorted_dictionary",
        "peekOfCode": "def print_sorted_dictionary(a_dictionary):\n    for key, value in sorted(a_dictionary.items()):\n        print(\"{}: {}\".format(key, value))",
        "detail": "0x04-python-more_data_structures.6-print_sorted_dictionary",
        "documentation": {}
    },
    {
        "label": "update_dictionary",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.7-update_dictionary",
        "description": "0x04-python-more_data_structures.7-update_dictionary",
        "peekOfCode": "def update_dictionary(a_dictionary, key, value):\n    a_dictionary[key] = value\n    return a_dictionary",
        "detail": "0x04-python-more_data_structures.7-update_dictionary",
        "documentation": {}
    },
    {
        "label": "simple_delete",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.8-simple_delete",
        "description": "0x04-python-more_data_structures.8-simple_delete",
        "peekOfCode": "def simple_delete(a_dictionary, key=\"\"):\n    a_dictionary.pop(key, None)\n    return a_dictionary",
        "detail": "0x04-python-more_data_structures.8-simple_delete",
        "documentation": {}
    },
    {
        "label": "multiply_by_2",
        "kind": 2,
        "importPath": "0x04-python-more_data_structures.9-multiply_by_2",
        "description": "0x04-python-more_data_structures.9-multiply_by_2",
        "peekOfCode": "def multiply_by_2(a_dictionary):\n    return {k: v * 2 for k, v in a_dictionary.items()}",
        "detail": "0x04-python-more_data_structures.9-multiply_by_2",
        "documentation": {}
    },
    {
        "label": "safe_print_list",
        "kind": 5,
        "importPath": "0x05-python-exceptions.0-main",
        "description": "0x05-python-exceptions.0-main",
        "peekOfCode": "safe_print_list = __import__('0-safe_print_list').safe_print_list\nmy_list = [1, 2, 3, 4, 5]\nnb_print = safe_print_list(my_list, 2)\nprint(\"nb_print: {:d}\".format(nb_print))\nnb_print = safe_print_list(my_list, len(my_list))\nprint(\"nb_print: {:d}\".format(nb_print))\nnb_print = safe_print_list(my_list, len(my_list) + 2)\nprint(\"nb_print: {:d}\".format(nb_print))",
        "detail": "0x05-python-exceptions.0-main",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "0x05-python-exceptions.0-main",
        "description": "0x05-python-exceptions.0-main",
        "peekOfCode": "my_list = [1, 2, 3, 4, 5]\nnb_print = safe_print_list(my_list, 2)\nprint(\"nb_print: {:d}\".format(nb_print))\nnb_print = safe_print_list(my_list, len(my_list))\nprint(\"nb_print: {:d}\".format(nb_print))\nnb_print = safe_print_list(my_list, len(my_list) + 2)\nprint(\"nb_print: {:d}\".format(nb_print))",
        "detail": "0x05-python-exceptions.0-main",
        "documentation": {}
    },
    {
        "label": "nb_print",
        "kind": 5,
        "importPath": "0x05-python-exceptions.0-main",
        "description": "0x05-python-exceptions.0-main",
        "peekOfCode": "nb_print = safe_print_list(my_list, 2)\nprint(\"nb_print: {:d}\".format(nb_print))\nnb_print = safe_print_list(my_list, len(my_list))\nprint(\"nb_print: {:d}\".format(nb_print))\nnb_print = safe_print_list(my_list, len(my_list) + 2)\nprint(\"nb_print: {:d}\".format(nb_print))",
        "detail": "0x05-python-exceptions.0-main",
        "documentation": {}
    },
    {
        "label": "nb_print",
        "kind": 5,
        "importPath": "0x05-python-exceptions.0-main",
        "description": "0x05-python-exceptions.0-main",
        "peekOfCode": "nb_print = safe_print_list(my_list, len(my_list))\nprint(\"nb_print: {:d}\".format(nb_print))\nnb_print = safe_print_list(my_list, len(my_list) + 2)\nprint(\"nb_print: {:d}\".format(nb_print))",
        "detail": "0x05-python-exceptions.0-main",
        "documentation": {}
    },
    {
        "label": "nb_print",
        "kind": 5,
        "importPath": "0x05-python-exceptions.0-main",
        "description": "0x05-python-exceptions.0-main",
        "peekOfCode": "nb_print = safe_print_list(my_list, len(my_list) + 2)\nprint(\"nb_print: {:d}\".format(nb_print))",
        "detail": "0x05-python-exceptions.0-main",
        "documentation": {}
    },
    {
        "label": "safe_print_list",
        "kind": 2,
        "importPath": "0x05-python-exceptions.0-safe_print_list",
        "description": "0x05-python-exceptions.0-safe_print_list",
        "peekOfCode": "def safe_print_list(my_list=[], x=0):\n    y = 0\n    for i in range(x):\n        try:\n            print(\"{}\".format(my_list[i]), end='')\n            y += 1\n        except IndexError:\n            break\n    print()\n    return y",
        "detail": "0x05-python-exceptions.0-safe_print_list",
        "documentation": {}
    },
    {
        "label": "safe_print_integer",
        "kind": 2,
        "importPath": "0x05-python-exceptions.1-safe_print_integer",
        "description": "0x05-python-exceptions.1-safe_print_integer",
        "peekOfCode": "def safe_print_integer(value):\n    try:\n        print(\"{:d}\".format(value))\n    except (ValueError, TypeError):\n        return False\n    return True",
        "detail": "0x05-python-exceptions.1-safe_print_integer",
        "documentation": {}
    },
    {
        "label": "safe_print_integer_err",
        "kind": 2,
        "importPath": "0x05-python-exceptions.100-safe_print_integer_err",
        "description": "0x05-python-exceptions.100-safe_print_integer_err",
        "peekOfCode": "def safe_print_integer_err(value):\n    try:\n        print(\"{:d}\".format(value))\n    except (ValueError, TypeError) as e:\n        sys.stderr.write(\"Exception: {}\\n\".format(e))\n        return False\n    return True",
        "detail": "0x05-python-exceptions.100-safe_print_integer_err",
        "documentation": {}
    },
    {
        "label": "safe_function",
        "kind": 2,
        "importPath": "0x05-python-exceptions.101-safe_function",
        "description": "0x05-python-exceptions.101-safe_function",
        "peekOfCode": "def safe_function(fct, *args):\n    result = None\n    try:\n        result = fct(*args)\n    except Exception as e:\n        sys.stderr.write(\"Exception: {}\\n\".format(e))\n    return result",
        "detail": "0x05-python-exceptions.101-safe_function",
        "documentation": {}
    },
    {
        "label": "magic_calculation",
        "kind": 2,
        "importPath": "0x05-python-exceptions.102-magic_calculation",
        "description": "0x05-python-exceptions.102-magic_calculation",
        "peekOfCode": "def magic_calculation(a, b):\n    result = 0\n    for i in range(1, 3):\n        try:\n            if (i > a):\n                raise Exception('Too far')\n            else:\n                result += (a ** b) / i\n        except:\n            result = a + b",
        "detail": "0x05-python-exceptions.102-magic_calculation",
        "documentation": {}
    },
    {
        "label": "safe_print_list_integers",
        "kind": 2,
        "importPath": "0x05-python-exceptions.2-safe_print_list_integers",
        "description": "0x05-python-exceptions.2-safe_print_list_integers",
        "peekOfCode": "def safe_print_list_integers(my_list=[], x=0):\n    y = 0\n    for i in range(x):\n        try:\n            print(\"{:d}\".format(my_list[i]), end='')\n            y += 1\n        except (TypeError, ValueError):\n            continue\n    print()\n    return y",
        "detail": "0x05-python-exceptions.2-safe_print_list_integers",
        "documentation": {}
    },
    {
        "label": "safe_print_division",
        "kind": 2,
        "importPath": "0x05-python-exceptions.3-safe_print_division",
        "description": "0x05-python-exceptions.3-safe_print_division",
        "peekOfCode": "def safe_print_division(a, b):\n    try:\n        result = a / b\n    except ZeroDivisionError:\n        result = None\n    finally:\n        print(\"Inside result: {}\".format(result))\n    return result",
        "detail": "0x05-python-exceptions.3-safe_print_division",
        "documentation": {}
    },
    {
        "label": "list_division",
        "kind": 2,
        "importPath": "0x05-python-exceptions.4-list_division",
        "description": "0x05-python-exceptions.4-list_division",
        "peekOfCode": "def list_division(my_list_1, my_list_2, list_length):\n    new = []\n    try:\n        for i in range(list_length):\n            try:\n                new.append(my_list_1[i] / my_list_2[i])\n            except ZeroDivisionError:\n                new.append(0)\n                print(\"division by 0\")\n            except TypeError:",
        "detail": "0x05-python-exceptions.4-list_division",
        "documentation": {}
    },
    {
        "label": "raise_exception",
        "kind": 2,
        "importPath": "0x05-python-exceptions.5-raise_exception",
        "description": "0x05-python-exceptions.5-raise_exception",
        "peekOfCode": "def raise_exception():\n    raise TypeError",
        "detail": "0x05-python-exceptions.5-raise_exception",
        "documentation": {}
    },
    {
        "label": "raise_exception_msg",
        "kind": 2,
        "importPath": "0x05-python-exceptions.6-raise_exception_msg",
        "description": "0x05-python-exceptions.6-raise_exception_msg",
        "peekOfCode": "def raise_exception_msg(message=\"\"):\n    raise NameError(message)",
        "detail": "0x05-python-exceptions.6-raise_exception_msg",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 5,
        "importPath": "0x06-python-classes.0-main",
        "description": "0x06-python-classes.0-main",
        "peekOfCode": "Square = __import__('0-square').Square\nmy_square = Square()\nprint(type(my_square))\nprint(my_square.__dict__)",
        "detail": "0x06-python-classes.0-main",
        "documentation": {}
    },
    {
        "label": "my_square",
        "kind": 5,
        "importPath": "0x06-python-classes.0-main",
        "description": "0x06-python-classes.0-main",
        "peekOfCode": "my_square = Square()\nprint(type(my_square))\nprint(my_square.__dict__)",
        "detail": "0x06-python-classes.0-main",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x06-python-classes.0-square",
        "description": "0x06-python-classes.0-square",
        "peekOfCode": "class Square():\n    \"\"\"Defines a square.\"\"\"\n    pass",
        "detail": "0x06-python-classes.0-square",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 5,
        "importPath": "0x06-python-classes.1-main",
        "description": "0x06-python-classes.1-main",
        "peekOfCode": "Square = __import__('1-square').Square\nmy_square = Square(3)\nprint(type(my_square))\nprint(my_square.__dict__)\ntry:\n    print(my_square.size)\nexcept Exception as e:\n    print(e)\ntry:\n    print(my_square.__size)",
        "detail": "0x06-python-classes.1-main",
        "documentation": {}
    },
    {
        "label": "my_square",
        "kind": 5,
        "importPath": "0x06-python-classes.1-main",
        "description": "0x06-python-classes.1-main",
        "peekOfCode": "my_square = Square(3)\nprint(type(my_square))\nprint(my_square.__dict__)\ntry:\n    print(my_square.size)\nexcept Exception as e:\n    print(e)\ntry:\n    print(my_square.__size)\nexcept Exception as e:",
        "detail": "0x06-python-classes.1-main",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x06-python-classes.1-square",
        "description": "0x06-python-classes.1-square",
        "peekOfCode": "class Square():\n    \"\"\"Defines a square.\"\"\"\n    def __init__(self, size):\n        \"\"\"Sets the necessary attributes for the Square object.\n        Args:\n            size (int): the size of one edge of the square.\n        \"\"\"\n        self.__size = size",
        "detail": "0x06-python-classes.1-square",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "0x06-python-classes.100-singly_linked_list",
        "description": "0x06-python-classes.100-singly_linked_list",
        "peekOfCode": "class Node():\n    \"\"\"Defines a node of a singly linked list.\"\"\"\n    def __init__(self, data, next_node=None):\n        \"\"\"Sets the necessary attributes for the Node object.\n        Args:\n            data (int): the value of the node\n            next_node (Node): the next Node\n        \"\"\"\n        self.data = data\n        self.next_node = next_node",
        "detail": "0x06-python-classes.100-singly_linked_list",
        "documentation": {}
    },
    {
        "label": "SinglyLinkedList",
        "kind": 6,
        "importPath": "0x06-python-classes.100-singly_linked_list",
        "description": "0x06-python-classes.100-singly_linked_list",
        "peekOfCode": "class SinglyLinkedList():\n    \"\"\"Defines a singly linked list\"\"\"\n    def __init__(self):\n        \"\"\"Sets the necessary attributes for the SinglyLinkedList object.\"\"\"\n        self.__head = None\n    def __str__(self):\n        \"\"\"Sets the print behavior of the SinglyLinkedList object.\"\"\"\n        sll_str = \"\"\n        node = self.__head\n        if node is not None:",
        "detail": "0x06-python-classes.100-singly_linked_list",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x06-python-classes.101-square",
        "description": "0x06-python-classes.101-square",
        "peekOfCode": "class Square():\n    \"\"\"Defines a square.\"\"\"\n    def __init__(self, size=0, position=(0, 0)):\n        \"\"\"Sets the necessary attributes for the Square object.\n        Args:\n            size (int): the size of one edge of the square.\n            position (tuple): the coordinates of the square.\n        \"\"\"\n        self.size = size\n        self.position = position",
        "detail": "0x06-python-classes.101-square",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x06-python-classes.102-square",
        "description": "0x06-python-classes.102-square",
        "peekOfCode": "class Square():\n    \"\"\"Defines a square.\"\"\"\n    def __init__(self, size=0):\n        \"\"\"Sets the necessary attributes for the Square object.\n        Args:\n            size (int): the size of one edge of the square.\n        \"\"\"\n        self.size = size\n    def __eq__(self, other):\n        \"\"\"Sets the compare equality behavior of the Square object.",
        "detail": "0x06-python-classes.102-square",
        "documentation": {}
    },
    {
        "label": "MagicClass",
        "kind": 6,
        "importPath": "0x06-python-classes.103-magic_class",
        "description": "0x06-python-classes.103-magic_class",
        "peekOfCode": "class MagicClass():\n    \"\"\"Defines a MagicClass object.\"\"\"\n    def __init__(self, radius=0):\n        \"\"\"Sets the necessary attributes for the MagicClass object.\n        Args:\n            radius (int, float): the radius of the circle\n        \"\"\"\n        self.__radius = 0\n        if type(radius) is not int and type(radius) is not float:\n            raise TypeError(\"radius must be a number\")",
        "detail": "0x06-python-classes.103-magic_class",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 5,
        "importPath": "0x06-python-classes.2-main",
        "description": "0x06-python-classes.2-main",
        "peekOfCode": "Square = __import__('2-square').Square\nmy_square_1 = Square(3)\nprint(type(my_square_1))\nprint(my_square_1.__dict__)\nmy_square_2 = Square()\nprint(type(my_square_2))\nprint(my_square_2.__dict__)\ntry:\n    print(my_square_1.size)\nexcept Exception as e:",
        "detail": "0x06-python-classes.2-main",
        "documentation": {}
    },
    {
        "label": "my_square_1",
        "kind": 5,
        "importPath": "0x06-python-classes.2-main",
        "description": "0x06-python-classes.2-main",
        "peekOfCode": "my_square_1 = Square(3)\nprint(type(my_square_1))\nprint(my_square_1.__dict__)\nmy_square_2 = Square()\nprint(type(my_square_2))\nprint(my_square_2.__dict__)\ntry:\n    print(my_square_1.size)\nexcept Exception as e:\n    print(e)",
        "detail": "0x06-python-classes.2-main",
        "documentation": {}
    },
    {
        "label": "my_square_2",
        "kind": 5,
        "importPath": "0x06-python-classes.2-main",
        "description": "0x06-python-classes.2-main",
        "peekOfCode": "my_square_2 = Square()\nprint(type(my_square_2))\nprint(my_square_2.__dict__)\ntry:\n    print(my_square_1.size)\nexcept Exception as e:\n    print(e)\ntry:\n    print(my_square_1.__size)\nexcept Exception as e:",
        "detail": "0x06-python-classes.2-main",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x06-python-classes.2-square",
        "description": "0x06-python-classes.2-square",
        "peekOfCode": "class Square():\n    \"\"\"Defines a square.\"\"\"\n    def __init__(self, size=0):\n        \"\"\"Sets the necessary attributes for the Square object.\n        Args:\n            size (int): the size of one edge of the square.\n        Raises:\n            TypeError: if size is not given as an integer.\n            ValueError: if size is less than 0.\n        \"\"\"",
        "detail": "0x06-python-classes.2-square",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 5,
        "importPath": "0x06-python-classes.3-main",
        "description": "0x06-python-classes.3-main",
        "peekOfCode": "Square = __import__('3-square').Square\nmy_square_1 = Square(3)\nprint(\"Area: {}\".format(my_square_1.area()))\ntry:\n    print(my_square_1.size)\nexcept Exception as e:\n    print(e)\ntry:\n    print(my_square_1.__size)\nexcept Exception as e:",
        "detail": "0x06-python-classes.3-main",
        "documentation": {}
    },
    {
        "label": "my_square_1",
        "kind": 5,
        "importPath": "0x06-python-classes.3-main",
        "description": "0x06-python-classes.3-main",
        "peekOfCode": "my_square_1 = Square(3)\nprint(\"Area: {}\".format(my_square_1.area()))\ntry:\n    print(my_square_1.size)\nexcept Exception as e:\n    print(e)\ntry:\n    print(my_square_1.__size)\nexcept Exception as e:\n    print(e)",
        "detail": "0x06-python-classes.3-main",
        "documentation": {}
    },
    {
        "label": "my_square_2",
        "kind": 5,
        "importPath": "0x06-python-classes.3-main",
        "description": "0x06-python-classes.3-main",
        "peekOfCode": "my_square_2 = Square(5)\nprint(\"Area: {}\".format(my_square_2.area()))",
        "detail": "0x06-python-classes.3-main",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x06-python-classes.3-square",
        "description": "0x06-python-classes.3-square",
        "peekOfCode": "class Square():\n    \"\"\"Defines a square.\"\"\"\n    def __init__(self, size=0):\n        \"\"\"Sets the necessary attributes for the Square object.\n        Args:\n            size (int): the size of one edge of the square.\n        Raises:\n            TypeError: if size is not given as an integer.\n            ValueError: if size is less than 0.\n        \"\"\"",
        "detail": "0x06-python-classes.3-square",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 5,
        "importPath": "0x06-python-classes.4-main",
        "description": "0x06-python-classes.4-main",
        "peekOfCode": "Square = __import__('4-square').Square\nmy_square = Square(89)\nprint(\"Area: {} for size: {}\".format(my_square.area(), my_square.size))\nmy_square.size = 3\nprint(\"Area: {} for size: {}\".format(my_square.area(), my_square.size))\ntry:\n    my_square.size = \"5 feet\"\n    print(\"Area: {} for size: {}\".format(my_square.area(), my_square.size))\nexcept Exception as e:\n    print(e)",
        "detail": "0x06-python-classes.4-main",
        "documentation": {}
    },
    {
        "label": "my_square",
        "kind": 5,
        "importPath": "0x06-python-classes.4-main",
        "description": "0x06-python-classes.4-main",
        "peekOfCode": "my_square = Square(89)\nprint(\"Area: {} for size: {}\".format(my_square.area(), my_square.size))\nmy_square.size = 3\nprint(\"Area: {} for size: {}\".format(my_square.area(), my_square.size))\ntry:\n    my_square.size = \"5 feet\"\n    print(\"Area: {} for size: {}\".format(my_square.area(), my_square.size))\nexcept Exception as e:\n    print(e)",
        "detail": "0x06-python-classes.4-main",
        "documentation": {}
    },
    {
        "label": "my_square.size",
        "kind": 5,
        "importPath": "0x06-python-classes.4-main",
        "description": "0x06-python-classes.4-main",
        "peekOfCode": "my_square.size = 3\nprint(\"Area: {} for size: {}\".format(my_square.area(), my_square.size))\ntry:\n    my_square.size = \"5 feet\"\n    print(\"Area: {} for size: {}\".format(my_square.area(), my_square.size))\nexcept Exception as e:\n    print(e)",
        "detail": "0x06-python-classes.4-main",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x06-python-classes.4-square",
        "description": "0x06-python-classes.4-square",
        "peekOfCode": "class Square():\n    \"\"\"Defines a square.\"\"\"\n    def __init__(self, size=0):\n        \"\"\"Sets the necessary attributes for the Square object.\n        Args:\n            size (int): the size of one edge of the square.\n        \"\"\"\n        self.size = size\n    @property\n    def size(self):",
        "detail": "0x06-python-classes.4-square",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 5,
        "importPath": "0x06-python-classes.5-main",
        "description": "0x06-python-classes.5-main",
        "peekOfCode": "Square = __import__('5-square').Square\nmy_square = Square(3)\nmy_square.my_print()\nprint(\"--\")\nmy_square.size = 10\nmy_square.my_print()\nprint(\"--\")\nmy_square.size = 0\nmy_square.my_print()\nprint(\"--\")",
        "detail": "0x06-python-classes.5-main",
        "documentation": {}
    },
    {
        "label": "my_square",
        "kind": 5,
        "importPath": "0x06-python-classes.5-main",
        "description": "0x06-python-classes.5-main",
        "peekOfCode": "my_square = Square(3)\nmy_square.my_print()\nprint(\"--\")\nmy_square.size = 10\nmy_square.my_print()\nprint(\"--\")\nmy_square.size = 0\nmy_square.my_print()\nprint(\"--\")",
        "detail": "0x06-python-classes.5-main",
        "documentation": {}
    },
    {
        "label": "my_square.size",
        "kind": 5,
        "importPath": "0x06-python-classes.5-main",
        "description": "0x06-python-classes.5-main",
        "peekOfCode": "my_square.size = 10\nmy_square.my_print()\nprint(\"--\")\nmy_square.size = 0\nmy_square.my_print()\nprint(\"--\")",
        "detail": "0x06-python-classes.5-main",
        "documentation": {}
    },
    {
        "label": "my_square.size",
        "kind": 5,
        "importPath": "0x06-python-classes.5-main",
        "description": "0x06-python-classes.5-main",
        "peekOfCode": "my_square.size = 0\nmy_square.my_print()\nprint(\"--\")",
        "detail": "0x06-python-classes.5-main",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x06-python-classes.5-square",
        "description": "0x06-python-classes.5-square",
        "peekOfCode": "class Square():\n    \"\"\"Defines a square.\"\"\"\n    def __init__(self, size=0):\n        \"\"\"Sets the necessary attributes for the Square object.\n        Args:\n            size (int): the size of one edge of the square.\n        \"\"\"\n        self.size = size\n    @property\n    def size(self):",
        "detail": "0x06-python-classes.5-square",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x06-python-classes.6-square",
        "description": "0x06-python-classes.6-square",
        "peekOfCode": "class Square():\n    \"\"\"Defines a square.\"\"\"\n    def __init__(self, size=0, position=(0, 0)):\n        \"\"\"Sets the necessary attributes for the Square object.\n        Args:\n            size (int): the size of one edge of the square.\n            position (tuple): the coordinates of the square.\n        \"\"\"\n        self.size = size\n        self.position = position",
        "detail": "0x06-python-classes.6-square",
        "documentation": {}
    },
    {
        "label": "TestMaxInteger",
        "kind": 6,
        "importPath": "0x07-python-test_driven_development.tests.6-max_integer_test",
        "description": "0x07-python-test_driven_development.tests.6-max_integer_test",
        "peekOfCode": "class TestMaxInteger(unittest.TestCase):\n    \"\"\"Test function\"\"\"\n    def test_max_integer(self):\n        \"\"\"\n        Tests if correct tests are ok\n        \"\"\"\n        lst = [1, 2, 3, 4]\n        self.assertEqual(max_integer(lst), 4)\n        lst = [1, 4, 2, 3, -4]\n        self.assertEqual(max_integer(lst), 4)",
        "detail": "0x07-python-test_driven_development.tests.6-max_integer_test",
        "documentation": {}
    },
    {
        "label": "max_integer",
        "kind": 5,
        "importPath": "0x07-python-test_driven_development.tests.6-max_integer_test",
        "description": "0x07-python-test_driven_development.tests.6-max_integer_test",
        "peekOfCode": "max_integer = __import__('6-max_integer').max_integer\nclass TestMaxInteger(unittest.TestCase):\n    \"\"\"Test function\"\"\"\n    def test_max_integer(self):\n        \"\"\"\n        Tests if correct tests are ok\n        \"\"\"\n        lst = [1, 2, 3, 4]\n        self.assertEqual(max_integer(lst), 4)\n        lst = [1, 4, 2, 3, -4]",
        "detail": "0x07-python-test_driven_development.tests.6-max_integer_test",
        "documentation": {}
    },
    {
        "label": "add_integer",
        "kind": 2,
        "importPath": "0x07-python-test_driven_development.0-add_integer",
        "description": "0x07-python-test_driven_development.0-add_integer",
        "peekOfCode": "def add_integer(a, b=98):\n    \"\"\"\n    Return the addition of a and b.\n    Args:\n        a (int, float): the first value.\n        b (int, float): the second value.\n    \"\"\"\n    if type(a) in [int, float]:\n        try:\n            a = int(a)",
        "detail": "0x07-python-test_driven_development.0-add_integer",
        "documentation": {}
    },
    {
        "label": "add_integer",
        "kind": 5,
        "importPath": "0x07-python-test_driven_development.0-main",
        "description": "0x07-python-test_driven_development.0-main",
        "peekOfCode": "add_integer = __import__('0-add_integer').add_integer\nprint(add_integer(1, 2))\nprint(add_integer(100, -2))\nprint(add_integer(2))\nprint(add_integer(100.3, -2))\ntry:\n    print(add_integer(4, \"School\"))\nexcept Exception as e:\n    print(e)\ntry:",
        "detail": "0x07-python-test_driven_development.0-main",
        "documentation": {}
    },
    {
        "label": "matrix_mul",
        "kind": 2,
        "importPath": "0x07-python-test_driven_development.100-matrix_mul",
        "description": "0x07-python-test_driven_development.100-matrix_mul",
        "peekOfCode": "def matrix_mul(m_a, m_b):\n    \"\"\"\n    Return a new matrix multiplied.\n    Args:\n        m_a (list): list of lists of integers or floats.\n        m_b (list): list of lists of integers or floats.\n    \"\"\"\n    if type(m_a) is not list:\n        raise TypeError(\"m_a must be a list\")\n    if type(m_b) is not list:",
        "detail": "0x07-python-test_driven_development.100-matrix_mul",
        "documentation": {}
    },
    {
        "label": "lazy_matrix_mul",
        "kind": 2,
        "importPath": "0x07-python-test_driven_development.101-lazy_matrix_mul",
        "description": "0x07-python-test_driven_development.101-lazy_matrix_mul",
        "peekOfCode": "def lazy_matrix_mul(m_a, m_b):\n    \"\"\"Return the multiplication of two matrices.\n    Args:\n        m_a (list of lists of ints/floats): The first matrix.\n        m_b (list of lists of ints/floats): The second matrix.\n    \"\"\"\n    return (np.matmul(m_a, m_b))",
        "detail": "0x07-python-test_driven_development.101-lazy_matrix_mul",
        "documentation": {}
    },
    {
        "label": "matrix_divided",
        "kind": 2,
        "importPath": "0x07-python-test_driven_development.2-matrix_divided",
        "description": "0x07-python-test_driven_development.2-matrix_divided",
        "peekOfCode": "def matrix_divided(matrix, div):\n    \"\"\"\n    Return a new matrix where each element has been divided by div.\n    Args:\n        matrix (list): list of lists of integers or floats.\n        div (int, float): the divider, >= 0.\n    \"\"\"\n    mtrx_type_e = 'matrix must be a matrix (list of lists) of integers/floats'\n    mtrx_len_e = 'Each row of the matrix must have the same size'\n    div_type_e = 'div must be a number'",
        "detail": "0x07-python-test_driven_development.2-matrix_divided",
        "documentation": {}
    },
    {
        "label": "say_my_name",
        "kind": 2,
        "importPath": "0x07-python-test_driven_development.3-say_my_name",
        "description": "0x07-python-test_driven_development.3-say_my_name",
        "peekOfCode": "def say_my_name(first_name, last_name=\"\"):\n    \"\"\"\n    Print My name is <first name> <last name>.\n    Args:\n        first_name (str): the first name.\n        last_name (str): the last name.\n    \"\"\"\n    if type(first_name) is not str:\n        raise TypeError(\"first_name must be a string\")\n    if type(last_name) is not str:",
        "detail": "0x07-python-test_driven_development.3-say_my_name",
        "documentation": {}
    },
    {
        "label": "print_square",
        "kind": 2,
        "importPath": "0x07-python-test_driven_development.4-print_square",
        "description": "0x07-python-test_driven_development.4-print_square",
        "peekOfCode": "def print_square(size):\n    \"\"\"\n    Print a square with the character #.\n    Args:\n        size (int): the size length of the square.\n    \"\"\"\n    if type(size) is not int:\n        raise TypeError(\"size must be an integer\")\n    if size < 0:\n        raise ValueError(\"size must be >= 0\")",
        "detail": "0x07-python-test_driven_development.4-print_square",
        "documentation": {}
    },
    {
        "label": "text_indentation",
        "kind": 2,
        "importPath": "0x07-python-test_driven_development.5-text_indentation",
        "description": "0x07-python-test_driven_development.5-text_indentation",
        "peekOfCode": "def text_indentation(text):\n    \"\"\"Print text with two new lines after each '.', '?', and ':'.\n    Args:\n        text (string): The text to print.\n    Raises:\n        TypeError: If text is not a string.\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(\"text must be a string\")\n    c = 0",
        "detail": "0x07-python-test_driven_development.5-text_indentation",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x08-python-more_classes.0-rectangle",
        "description": "0x08-python-more_classes.0-rectangle",
        "peekOfCode": "class Rectangle():\n    \"\"\"Defines a rectangle.\"\"\"\n    pass",
        "detail": "0x08-python-more_classes.0-rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x08-python-more_classes.1-rectangle",
        "description": "0x08-python-more_classes.1-rectangle",
        "peekOfCode": "class Rectangle():\n    \"\"\"Defines a rectangle.\"\"\"\n    def __init__(self, width=0, height=0):\n        \"\"\"Sets the necessary attributes for the Rectangle object.\n        Args:\n            width (int): the width of the rectangle.\n            height (int): the height of the rectangle.\n        \"\"\"\n        self.width = width\n        self.height = height",
        "detail": "0x08-python-more_classes.1-rectangle",
        "documentation": {}
    },
    {
        "label": "get_input",
        "kind": 2,
        "importPath": "0x08-python-more_classes.101-nqueens",
        "description": "0x08-python-more_classes.101-nqueens",
        "peekOfCode": "def get_input():\n    '''Retrieves and validates this program's argument.\n    Returns:\n        int: The size of the chessboard.\n    '''\n    global n\n    n = 0\n    if len(sys.argv) != 2:\n        print('Usage: nqueens N')\n        sys.exit(1)",
        "detail": "0x08-python-more_classes.101-nqueens",
        "documentation": {}
    },
    {
        "label": "is_attacking",
        "kind": 2,
        "importPath": "0x08-python-more_classes.101-nqueens",
        "description": "0x08-python-more_classes.101-nqueens",
        "peekOfCode": "def is_attacking(pos0, pos1):\n    '''Checks if the positions of two queens are in an attacking mode.\n    Args:\n        pos0 (list or tuple): The first queen's position.\n        pos1 (list or tuple): The second queen's position.\n    Returns:\n        bool: True if the queens are in an attacking position else False.\n    '''\n    if (pos0[0] == pos1[0]) or (pos0[1] == pos1[1]):\n        return True",
        "detail": "0x08-python-more_classes.101-nqueens",
        "documentation": {}
    },
    {
        "label": "group_exists",
        "kind": 2,
        "importPath": "0x08-python-more_classes.101-nqueens",
        "description": "0x08-python-more_classes.101-nqueens",
        "peekOfCode": "def group_exists(group):\n    '''Checks if a group exists in the list of solutions.\n    Args:\n        group (list of integers): A group of possible positions.\n    Returns:\n        bool: True if it exists, otherwise False.\n    '''\n    global solutions\n    for stn in solutions:\n        i = 0",
        "detail": "0x08-python-more_classes.101-nqueens",
        "documentation": {}
    },
    {
        "label": "build_solution",
        "kind": 2,
        "importPath": "0x08-python-more_classes.101-nqueens",
        "description": "0x08-python-more_classes.101-nqueens",
        "peekOfCode": "def build_solution(row, group):\n    '''Builds a solution for the n queens problem.\n    Args:\n        row (int): The current row in the chessboard.\n        group (list of lists of integers): The group of valid positions.\n    '''\n    global solutions\n    global n\n    if row == n:\n        tmp0 = group.copy()",
        "detail": "0x08-python-more_classes.101-nqueens",
        "documentation": {}
    },
    {
        "label": "get_solutions",
        "kind": 2,
        "importPath": "0x08-python-more_classes.101-nqueens",
        "description": "0x08-python-more_classes.101-nqueens",
        "peekOfCode": "def get_solutions():\n    '''Gets the solutions for the given chessboard size.\n    '''\n    global pos, n\n    pos = list(map(lambda x: [x // n, x % n], range(n ** 2)))\n    a = 0\n    group = []\n    build_solution(a, group)\nn = get_input()\nget_solutions()",
        "detail": "0x08-python-more_classes.101-nqueens",
        "documentation": {}
    },
    {
        "label": "solutions",
        "kind": 5,
        "importPath": "0x08-python-more_classes.101-nqueens",
        "description": "0x08-python-more_classes.101-nqueens",
        "peekOfCode": "solutions = []\n'''The list of possible solutions to the N queens problem.\n'''\nn = 0\n'''The size of the chessboard.\n'''\npos = None\n'''The list of possible positions on the chessboard.\n'''\ndef get_input():",
        "detail": "0x08-python-more_classes.101-nqueens",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "0x08-python-more_classes.101-nqueens",
        "description": "0x08-python-more_classes.101-nqueens",
        "peekOfCode": "n = 0\n'''The size of the chessboard.\n'''\npos = None\n'''The list of possible positions on the chessboard.\n'''\ndef get_input():\n    '''Retrieves and validates this program's argument.\n    Returns:\n        int: The size of the chessboard.",
        "detail": "0x08-python-more_classes.101-nqueens",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "0x08-python-more_classes.101-nqueens",
        "description": "0x08-python-more_classes.101-nqueens",
        "peekOfCode": "pos = None\n'''The list of possible positions on the chessboard.\n'''\ndef get_input():\n    '''Retrieves and validates this program's argument.\n    Returns:\n        int: The size of the chessboard.\n    '''\n    global n\n    n = 0",
        "detail": "0x08-python-more_classes.101-nqueens",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "0x08-python-more_classes.101-nqueens",
        "description": "0x08-python-more_classes.101-nqueens",
        "peekOfCode": "n = get_input()\nget_solutions()\nfor solution in solutions:\n    print(solution)",
        "detail": "0x08-python-more_classes.101-nqueens",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x08-python-more_classes.2-rectangle",
        "description": "0x08-python-more_classes.2-rectangle",
        "peekOfCode": "class Rectangle():\n    \"\"\"Defines a rectangle.\"\"\"\n    def __init__(self, width=0, height=0):\n        \"\"\"Sets the necessary attributes for the Rectangle object.\n        Args:\n            width (int): the width of the rectangle.\n            height (int): the height of the rectangle.\n        \"\"\"\n        self.width = width\n        self.height = height",
        "detail": "0x08-python-more_classes.2-rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x08-python-more_classes.3-rectangle",
        "description": "0x08-python-more_classes.3-rectangle",
        "peekOfCode": "class Rectangle():\n    \"\"\"Defines a rectangle.\"\"\"\n    def __init__(self, width=0, height=0):\n        \"\"\"Sets the necessary attributes for the Rectangle object.\n        Args:\n            width (int): the width of the rectangle.\n            height (int): the height of the rectangle.\n        \"\"\"\n        self.width = width\n        self.height = height",
        "detail": "0x08-python-more_classes.3-rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x08-python-more_classes.4-rectangle",
        "description": "0x08-python-more_classes.4-rectangle",
        "peekOfCode": "class Rectangle():\n    \"\"\"Defines a rectangle.\"\"\"\n    def __init__(self, width=0, height=0):\n        \"\"\"Sets the necessary attributes for the Rectangle object.\n        Args:\n            width (int): the width of the rectangle.\n            height (int): the height of the rectangle.\n        \"\"\"\n        self.width = width\n        self.height = height",
        "detail": "0x08-python-more_classes.4-rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x08-python-more_classes.5-rectangle",
        "description": "0x08-python-more_classes.5-rectangle",
        "peekOfCode": "class Rectangle():\n    \"\"\"Defines a rectangle.\"\"\"\n    def __init__(self, width=0, height=0):\n        \"\"\"Sets the necessary attributes for the Rectangle object.\n        Args:\n            width (int): the width of the rectangle.\n            height (int): the height of the rectangle.\n        \"\"\"\n        self.width = width\n        self.height = height",
        "detail": "0x08-python-more_classes.5-rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x08-python-more_classes.6-rectangle",
        "description": "0x08-python-more_classes.6-rectangle",
        "peekOfCode": "class Rectangle():\n    \"\"\"Defines a rectangle.\"\"\"\n    number_of_instances = 0\n    def __init__(self, width=0, height=0):\n        \"\"\"Sets the necessary attributes for the Rectangle object.\n        Args:\n            width (int): the width of the rectangle.\n            height (int): the height of the rectangle.\n        \"\"\"\n        self.width = width",
        "detail": "0x08-python-more_classes.6-rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x08-python-more_classes.7-rectangle",
        "description": "0x08-python-more_classes.7-rectangle",
        "peekOfCode": "class Rectangle():\n    \"\"\"Defines a rectangle.\"\"\"\n    number_of_instances = 0\n    print_symbol = '#'\n    def __init__(self, width=0, height=0):\n        \"\"\"Sets the necessary attributes for the Rectangle object.\n        Args:\n            width (int): the width of the rectangle.\n            height (int): the height of the rectangle.\n        \"\"\"",
        "detail": "0x08-python-more_classes.7-rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x08-python-more_classes.8-rectangle",
        "description": "0x08-python-more_classes.8-rectangle",
        "peekOfCode": "class Rectangle():\n    \"\"\"Defines a rectangle.\"\"\"\n    number_of_instances = 0\n    print_symbol = '#'\n    def __init__(self, width=0, height=0):\n        \"\"\"Sets the necessary attributes for the Rectangle object.\n        Args:\n            width (int): the width of the rectangle.\n            height (int): the height of the rectangle.\n        \"\"\"",
        "detail": "0x08-python-more_classes.8-rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x08-python-more_classes.9-rectangle",
        "description": "0x08-python-more_classes.9-rectangle",
        "peekOfCode": "class Rectangle():\n    \"\"\"Defines a rectangle.\"\"\"\n    number_of_instances = 0\n    print_symbol = '#'\n    def __init__(self, width=0, height=0):\n        \"\"\"Sets the necessary attributes for the Rectangle object.\n        Args:\n            width (int): the width of the rectangle.\n            height (int): the height of the rectangle.\n        \"\"\"",
        "detail": "0x08-python-more_classes.9-rectangle",
        "documentation": {}
    },
    {
        "label": "magic_string",
        "kind": 2,
        "importPath": "0x09-python-everything_is_object.100-magic_string",
        "description": "0x09-python-everything_is_object.100-magic_string",
        "peekOfCode": "def magic_string(static={\"count\": 0}):\n    static[\"count\"] += 1\n    return str(\"BestSchool, \" * static[\"count\"])[:-2]",
        "detail": "0x09-python-everything_is_object.100-magic_string",
        "documentation": {}
    },
    {
        "label": "LockedClass",
        "kind": 6,
        "importPath": "0x09-python-everything_is_object.101-locked_class",
        "description": "0x09-python-everything_is_object.101-locked_class",
        "peekOfCode": "class LockedClass:\n    \"\"\"LockedClass class containing only __slots__.\"\"\"\n    __slots__ = ['first_name']",
        "detail": "0x09-python-everything_is_object.101-locked_class",
        "documentation": {}
    },
    {
        "label": "copy_list",
        "kind": 2,
        "importPath": "0x09-python-everything_is_object.19-copy_list",
        "description": "0x09-python-everything_is_object.19-copy_list",
        "peekOfCode": "def copy_list(l):\n    return l[:]",
        "detail": "0x09-python-everything_is_object.19-copy_list",
        "documentation": {}
    },
    {
        "label": "lookup",
        "kind": 2,
        "importPath": "0x0A-python-inheritance.test.0-lookup",
        "description": "0x0A-python-inheritance.test.0-lookup",
        "peekOfCode": "def lookup(obj):\n    \"\"\"Returns the list of available attributes and methods of an object\"\"\"\n    return dir(obj)",
        "detail": "0x0A-python-inheritance.test.0-lookup",
        "documentation": {}
    },
    {
        "label": "MyClass1",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.0-main",
        "description": "0x0A-python-inheritance.test.0-main",
        "peekOfCode": "class MyClass1(object):\n    pass\nclass MyClass2(object):\n    my_attr1 = 3\n    def my_meth(self):\n        pass\nprint(lookup(MyClass1))\nprint(lookup(MyClass2))\nprint(lookup(int))",
        "detail": "0x0A-python-inheritance.test.0-main",
        "documentation": {}
    },
    {
        "label": "MyClass2",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.0-main",
        "description": "0x0A-python-inheritance.test.0-main",
        "peekOfCode": "class MyClass2(object):\n    my_attr1 = 3\n    def my_meth(self):\n        pass\nprint(lookup(MyClass1))\nprint(lookup(MyClass2))\nprint(lookup(int))",
        "detail": "0x0A-python-inheritance.test.0-main",
        "documentation": {}
    },
    {
        "label": "lookup",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.0-main",
        "description": "0x0A-python-inheritance.test.0-main",
        "peekOfCode": "lookup = __import__('0-lookup').lookup\nclass MyClass1(object):\n    pass\nclass MyClass2(object):\n    my_attr1 = 3\n    def my_meth(self):\n        pass\nprint(lookup(MyClass1))\nprint(lookup(MyClass2))\nprint(lookup(int))",
        "detail": "0x0A-python-inheritance.test.0-main",
        "documentation": {}
    },
    {
        "label": "MyList",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.1-main",
        "description": "0x0A-python-inheritance.test.1-main",
        "peekOfCode": "MyList = __import__('1-my_list').MyList\nmy_list = MyList()\nmy_list.append(1)\nmy_list.append(4)\nmy_list.append(2)\nmy_list.append(3)\nmy_list.append(5)\nprint(my_list)\nmy_list.print_sorted()\nprint(my_list)",
        "detail": "0x0A-python-inheritance.test.1-main",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.1-main",
        "description": "0x0A-python-inheritance.test.1-main",
        "peekOfCode": "my_list = MyList()\nmy_list.append(1)\nmy_list.append(4)\nmy_list.append(2)\nmy_list.append(3)\nmy_list.append(5)\nprint(my_list)\nmy_list.print_sorted()\nprint(my_list)",
        "detail": "0x0A-python-inheritance.test.1-main",
        "documentation": {}
    },
    {
        "label": "MyList",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.1-my_list",
        "description": "0x0A-python-inheritance.test.1-my_list",
        "peekOfCode": "class MyList(list):\n    \"\"\"a subclass of list\"\"\"\n    def __init__(self):\n        \"\"\"initializes the object\"\"\"\n        super().__init__()\n    def print_sorted(self):\n        \"\"\"prints the sorted list\"\"\"\n        print(sorted(self))",
        "detail": "0x0A-python-inheritance.test.1-my_list",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.10-main",
        "description": "0x0A-python-inheritance.test.10-main",
        "peekOfCode": "Square = __import__('10-square').Square\ns = Square(13)\nprint(s)\nprint(s.area())",
        "detail": "0x0A-python-inheritance.test.10-main",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.10-main",
        "description": "0x0A-python-inheritance.test.10-main",
        "peekOfCode": "s = Square(13)\nprint(s)\nprint(s.area())",
        "detail": "0x0A-python-inheritance.test.10-main",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.10-square",
        "description": "0x0A-python-inheritance.test.10-square",
        "peekOfCode": "class Square(Rectangle):\n    \"\"\"Defines the Square class that inherits from Rectangle.\"\"\"\n    def __init__(self, size):\n        \"\"\"Checks and sets the default attributes of Square class.\"\"\"\n        self.integer_validator(\"size\", size)\n        super().__init__(size, size)\n        self.__size = size",
        "detail": "0x0A-python-inheritance.test.10-square",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.10-square",
        "description": "0x0A-python-inheritance.test.10-square",
        "peekOfCode": "Rectangle = __import__('9-rectangle').Rectangle\nclass Square(Rectangle):\n    \"\"\"Defines the Square class that inherits from Rectangle.\"\"\"\n    def __init__(self, size):\n        \"\"\"Checks and sets the default attributes of Square class.\"\"\"\n        self.integer_validator(\"size\", size)\n        super().__init__(size, size)\n        self.__size = size",
        "detail": "0x0A-python-inheritance.test.10-square",
        "documentation": {}
    },
    {
        "label": "MyInt",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.100-main",
        "description": "0x0A-python-inheritance.test.100-main",
        "peekOfCode": "MyInt = __import__('100-my_int').MyInt\nmy_i = MyInt(3)\nprint(my_i)\nprint(my_i == 3)\nprint(my_i != 3)",
        "detail": "0x0A-python-inheritance.test.100-main",
        "documentation": {}
    },
    {
        "label": "my_i",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.100-main",
        "description": "0x0A-python-inheritance.test.100-main",
        "peekOfCode": "my_i = MyInt(3)\nprint(my_i)\nprint(my_i == 3)\nprint(my_i != 3)",
        "detail": "0x0A-python-inheritance.test.100-main",
        "documentation": {}
    },
    {
        "label": "MyInt",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.100-my_int",
        "description": "0x0A-python-inheritance.test.100-my_int",
        "peekOfCode": "class MyInt(int):\n    \"\"\"Defines the MyInt class.\"\"\"\n    def __eq__(self, other):\n        \"\"\"Sets the == behaviour.\"\"\"\n        return int(self) != other\n    def __ne__(self, other):\n        \"\"\"Sets the != behaviour.\"\"\"\n        return int(self) == other",
        "detail": "0x0A-python-inheritance.test.100-my_int",
        "documentation": {}
    },
    {
        "label": "add_attribute",
        "kind": 2,
        "importPath": "0x0A-python-inheritance.test.101-add_attribute",
        "description": "0x0A-python-inheritance.test.101-add_attribute",
        "peekOfCode": "def add_attribute(obj, name, value):\n    \"\"\"Adds a new attribute to an object if it’s possible.\"\"\"\n    if not hasattr(obj, '__dict__'):\n        raise TypeError(\"can't add new attribute\")\n    setattr(obj, name, value)",
        "detail": "0x0A-python-inheritance.test.101-add_attribute",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.101-main",
        "description": "0x0A-python-inheritance.test.101-main",
        "peekOfCode": "class MyClass():\n    pass\nmc = MyClass()\nadd_attribute(mc, \"name\", \"John\")\nprint(mc.name)\ntry:\n    a = \"My String\"\n    add_attribute(a, \"name\", \"Bob\")\n    print(a.name)\nexcept Exception as e:",
        "detail": "0x0A-python-inheritance.test.101-main",
        "documentation": {}
    },
    {
        "label": "add_attribute",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.101-main",
        "description": "0x0A-python-inheritance.test.101-main",
        "peekOfCode": "add_attribute = __import__('101-add_attribute').add_attribute\nclass MyClass():\n    pass\nmc = MyClass()\nadd_attribute(mc, \"name\", \"John\")\nprint(mc.name)\ntry:\n    a = \"My String\"\n    add_attribute(a, \"name\", \"Bob\")\n    print(a.name)",
        "detail": "0x0A-python-inheritance.test.101-main",
        "documentation": {}
    },
    {
        "label": "mc",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.101-main",
        "description": "0x0A-python-inheritance.test.101-main",
        "peekOfCode": "mc = MyClass()\nadd_attribute(mc, \"name\", \"John\")\nprint(mc.name)\ntry:\n    a = \"My String\"\n    add_attribute(a, \"name\", \"Bob\")\n    print(a.name)\nexcept Exception as e:\n    print(\"[{}] {}\".format(e.__class__.__name__, e))",
        "detail": "0x0A-python-inheritance.test.101-main",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.11-main",
        "description": "0x0A-python-inheritance.test.11-main",
        "peekOfCode": "Square = __import__('11-square').Square\ns = Square(13)\nprint(s)\nprint(s.area())",
        "detail": "0x0A-python-inheritance.test.11-main",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.11-main",
        "description": "0x0A-python-inheritance.test.11-main",
        "peekOfCode": "s = Square(13)\nprint(s)\nprint(s.area())",
        "detail": "0x0A-python-inheritance.test.11-main",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.11-square",
        "description": "0x0A-python-inheritance.test.11-square",
        "peekOfCode": "class Square(Rectangle):\n    \"\"\"Defines the Square class that inherits from Rectangle.\"\"\"\n    def __init__(self, size):\n        \"\"\"Checks and sets the default attributes of Square class.\"\"\"\n        self.integer_validator(\"size\", size)\n        super().__init__(size, size)\n        self.__size = size\n    def __str__(self):\n        \"\"\"Sets the str behaviour.\"\"\"\n        return \"[Square] {:d}/{:d}\".format(self.__size, self.__size)",
        "detail": "0x0A-python-inheritance.test.11-square",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.11-square",
        "description": "0x0A-python-inheritance.test.11-square",
        "peekOfCode": "Rectangle = __import__('9-rectangle').Rectangle\nclass Square(Rectangle):\n    \"\"\"Defines the Square class that inherits from Rectangle.\"\"\"\n    def __init__(self, size):\n        \"\"\"Checks and sets the default attributes of Square class.\"\"\"\n        self.integer_validator(\"size\", size)\n        super().__init__(size, size)\n        self.__size = size\n    def __str__(self):\n        \"\"\"Sets the str behaviour.\"\"\"",
        "detail": "0x0A-python-inheritance.test.11-square",
        "documentation": {}
    },
    {
        "label": "is_same_class",
        "kind": 2,
        "importPath": "0x0A-python-inheritance.test.2-is_same_class",
        "description": "0x0A-python-inheritance.test.2-is_same_class",
        "peekOfCode": "def is_same_class(obj, a_class):\n    \"\"\"\n    Returns True if the object is exactly an instance\n    of the specified class ; otherwise False.\n    \"\"\"\n    return type(obj) is a_class",
        "detail": "0x0A-python-inheritance.test.2-is_same_class",
        "documentation": {}
    },
    {
        "label": "is_same_class",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.2-main",
        "description": "0x0A-python-inheritance.test.2-main",
        "peekOfCode": "is_same_class = __import__('2-is_same_class').is_same_class\na = 1\nif is_same_class(a, int):\n    print(\"{} is an instance of the class {}\".format(a, int.__name__))\nif is_same_class(a, float):\n    print(\"{} is an instance of the class {}\".format(a, float.__name__))\nif is_same_class(a, object):\n    print(\"{} is an instance of the class {}\".format(a, object.__name__))",
        "detail": "0x0A-python-inheritance.test.2-main",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.2-main",
        "description": "0x0A-python-inheritance.test.2-main",
        "peekOfCode": "a = 1\nif is_same_class(a, int):\n    print(\"{} is an instance of the class {}\".format(a, int.__name__))\nif is_same_class(a, float):\n    print(\"{} is an instance of the class {}\".format(a, float.__name__))\nif is_same_class(a, object):\n    print(\"{} is an instance of the class {}\".format(a, object.__name__))",
        "detail": "0x0A-python-inheritance.test.2-main",
        "documentation": {}
    },
    {
        "label": "is_kind_of_class",
        "kind": 2,
        "importPath": "0x0A-python-inheritance.test.3-is_kind_of_class",
        "description": "0x0A-python-inheritance.test.3-is_kind_of_class",
        "peekOfCode": "def is_kind_of_class(obj, a_class):\n    \"\"\"\n    Returns True if the object is an instance of, or if\n    the object is an instance of a class that inherited\n    from, the specified class ; otherwise False.\n    \"\"\"\n    return isinstance(obj, a_class)",
        "detail": "0x0A-python-inheritance.test.3-is_kind_of_class",
        "documentation": {}
    },
    {
        "label": "is_kind_of_class",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.3-main",
        "description": "0x0A-python-inheritance.test.3-main",
        "peekOfCode": "is_kind_of_class = __import__('3-is_kind_of_class').is_kind_of_class\na = 1\nif is_kind_of_class(a, int):\n    print(\"{} comes from {}\".format(a, int.__name__))\nif is_kind_of_class(a, float):\n    print(\"{} comes from {}\".format(a, float.__name__))\nif is_kind_of_class(a, object):\n    print(\"{} comes from {}\".format(a, object.__name__))",
        "detail": "0x0A-python-inheritance.test.3-main",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.3-main",
        "description": "0x0A-python-inheritance.test.3-main",
        "peekOfCode": "a = 1\nif is_kind_of_class(a, int):\n    print(\"{} comes from {}\".format(a, int.__name__))\nif is_kind_of_class(a, float):\n    print(\"{} comes from {}\".format(a, float.__name__))\nif is_kind_of_class(a, object):\n    print(\"{} comes from {}\".format(a, object.__name__))",
        "detail": "0x0A-python-inheritance.test.3-main",
        "documentation": {}
    },
    {
        "label": "inherits_from",
        "kind": 2,
        "importPath": "0x0A-python-inheritance.test.4-inherits_from",
        "description": "0x0A-python-inheritance.test.4-inherits_from",
        "peekOfCode": "def inherits_from(obj, a_class):\n    \"\"\"\n    Returns True if the object is an instance of a\n    class that inherited (directly or indirectly)\n    from the specified class ; otherwise False.\n    \"\"\"\n    return issubclass(type(obj), a_class) and type(obj) is not a_class",
        "detail": "0x0A-python-inheritance.test.4-inherits_from",
        "documentation": {}
    },
    {
        "label": "inherits_from",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.4-main",
        "description": "0x0A-python-inheritance.test.4-main",
        "peekOfCode": "inherits_from = __import__('4-inherits_from').inherits_from\na = True\nif inherits_from(a, int):\n    print(\"{} inherited from class {}\".format(a, int.__name__))\nif inherits_from(a, bool):\n    print(\"{} inherited from class {}\".format(a, bool.__name__))\nif inherits_from(a, object):\n    print(\"{} inherited from class {}\".format(a, object.__name__))",
        "detail": "0x0A-python-inheritance.test.4-main",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.4-main",
        "description": "0x0A-python-inheritance.test.4-main",
        "peekOfCode": "a = True\nif inherits_from(a, int):\n    print(\"{} inherited from class {}\".format(a, int.__name__))\nif inherits_from(a, bool):\n    print(\"{} inherited from class {}\".format(a, bool.__name__))\nif inherits_from(a, object):\n    print(\"{} inherited from class {}\".format(a, object.__name__))",
        "detail": "0x0A-python-inheritance.test.4-main",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.5-base_geometry",
        "description": "0x0A-python-inheritance.test.5-base_geometry",
        "peekOfCode": "class BaseGeometry():\n    \"\"\"Defines the BaseGeometry class.\"\"\"",
        "detail": "0x0A-python-inheritance.test.5-base_geometry",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.5-main",
        "description": "0x0A-python-inheritance.test.5-main",
        "peekOfCode": "BaseGeometry = __import__('5-base_geometry').BaseGeometry\nbg = BaseGeometry()\nprint(bg)\nprint(dir(bg))\nprint(dir(BaseGeometry))",
        "detail": "0x0A-python-inheritance.test.5-main",
        "documentation": {}
    },
    {
        "label": "bg",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.5-main",
        "description": "0x0A-python-inheritance.test.5-main",
        "peekOfCode": "bg = BaseGeometry()\nprint(bg)\nprint(dir(bg))\nprint(dir(BaseGeometry))",
        "detail": "0x0A-python-inheritance.test.5-main",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.6-base_geometry",
        "description": "0x0A-python-inheritance.test.6-base_geometry",
        "peekOfCode": "class BaseGeometry():\n    \"\"\"Defines the BaseGeometry class.\"\"\"\n    def area(self):\n        \"\"\"Raises an Exception.\"\"\"\n        raise Exception(\"area() is not implemented\")",
        "detail": "0x0A-python-inheritance.test.6-base_geometry",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.6-main",
        "description": "0x0A-python-inheritance.test.6-main",
        "peekOfCode": "BaseGeometry = __import__('6-base_geometry').BaseGeometry\nbg = BaseGeometry()\ntry:\n    print(bg.area())\nexcept Exception as e:\n    print(\"[{}] {}\".format(e.__class__.__name__, e))",
        "detail": "0x0A-python-inheritance.test.6-main",
        "documentation": {}
    },
    {
        "label": "bg",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.6-main",
        "description": "0x0A-python-inheritance.test.6-main",
        "peekOfCode": "bg = BaseGeometry()\ntry:\n    print(bg.area())\nexcept Exception as e:\n    print(\"[{}] {}\".format(e.__class__.__name__, e))",
        "detail": "0x0A-python-inheritance.test.6-main",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.7-base_geometry",
        "description": "0x0A-python-inheritance.test.7-base_geometry",
        "peekOfCode": "class BaseGeometry():\n    \"\"\"Defines the BaseGeometry class.\"\"\"\n    def area(self):\n        \"\"\"Raises an Exception.\"\"\"\n        raise Exception(\"area() is not implemented\")\n    def integer_validator(self, name, value):\n        \"\"\"Validates value.\"\"\"\n        if type(value) is not int:\n            raise TypeError(name + \" must be an integer\")\n        if value <= 0:",
        "detail": "0x0A-python-inheritance.test.7-base_geometry",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.7-main",
        "description": "0x0A-python-inheritance.test.7-main",
        "peekOfCode": "BaseGeometry = __import__('7-base_geometry').BaseGeometry\nbg = BaseGeometry()\nbg.integer_validator(\"my_int\", 12)\nbg.integer_validator(\"width\", 89)\ntry:\n    bg.integer_validator(\"name\", \"John\")\nexcept Exception as e:\n    print(\"[{}] {}\".format(e.__class__.__name__, e))\ntry:\n    bg.integer_validator(\"age\", 0)",
        "detail": "0x0A-python-inheritance.test.7-main",
        "documentation": {}
    },
    {
        "label": "bg",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.7-main",
        "description": "0x0A-python-inheritance.test.7-main",
        "peekOfCode": "bg = BaseGeometry()\nbg.integer_validator(\"my_int\", 12)\nbg.integer_validator(\"width\", 89)\ntry:\n    bg.integer_validator(\"name\", \"John\")\nexcept Exception as e:\n    print(\"[{}] {}\".format(e.__class__.__name__, e))\ntry:\n    bg.integer_validator(\"age\", 0)\nexcept Exception as e:",
        "detail": "0x0A-python-inheritance.test.7-main",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.8-main",
        "description": "0x0A-python-inheritance.test.8-main",
        "peekOfCode": "Rectangle = __import__('8-rectangle').Rectangle\nr = Rectangle(3, 5)\nprint(r)\nprint(dir(r))\ntry:\n    print(\"Rectangle: {} - {}\".format(r.width, r.height))\nexcept Exception as e:\n    print(\"[{}] {}\".format(e.__class__.__name__, e))\ntry:\n    r2 = Rectangle(4, True)",
        "detail": "0x0A-python-inheritance.test.8-main",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.8-main",
        "description": "0x0A-python-inheritance.test.8-main",
        "peekOfCode": "r = Rectangle(3, 5)\nprint(r)\nprint(dir(r))\ntry:\n    print(\"Rectangle: {} - {}\".format(r.width, r.height))\nexcept Exception as e:\n    print(\"[{}] {}\".format(e.__class__.__name__, e))\ntry:\n    r2 = Rectangle(4, True)\nexcept Exception as e:",
        "detail": "0x0A-python-inheritance.test.8-main",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.8-rectangle",
        "description": "0x0A-python-inheritance.test.8-rectangle",
        "peekOfCode": "class Rectangle(BaseGeometry):\n    \"\"\"Defines the Rectangle class that inherits from BaseGeometry.\"\"\"\n    def __init__(self, width, height):\n        \"\"\"Checks and sets the default attributes of Rectangle class.\"\"\"\n        self.integer_validator(\"width\", width)\n        self.integer_validator(\"height\", height)\n        self.__width = width\n        self.__height = height",
        "detail": "0x0A-python-inheritance.test.8-rectangle",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.8-rectangle",
        "description": "0x0A-python-inheritance.test.8-rectangle",
        "peekOfCode": "BaseGeometry = __import__('7-base_geometry').BaseGeometry\nclass Rectangle(BaseGeometry):\n    \"\"\"Defines the Rectangle class that inherits from BaseGeometry.\"\"\"\n    def __init__(self, width, height):\n        \"\"\"Checks and sets the default attributes of Rectangle class.\"\"\"\n        self.integer_validator(\"width\", width)\n        self.integer_validator(\"height\", height)\n        self.__width = width\n        self.__height = height",
        "detail": "0x0A-python-inheritance.test.8-rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.9-main",
        "description": "0x0A-python-inheritance.test.9-main",
        "peekOfCode": "Rectangle = __import__('9-rectangle').Rectangle\nr = Rectangle(3, 5)\nprint(r)\nprint(r.area())",
        "detail": "0x0A-python-inheritance.test.9-main",
        "documentation": {}
    },
    {
        "label": "r",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.9-main",
        "description": "0x0A-python-inheritance.test.9-main",
        "peekOfCode": "r = Rectangle(3, 5)\nprint(r)\nprint(r.area())",
        "detail": "0x0A-python-inheritance.test.9-main",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.test.9-rectangle",
        "description": "0x0A-python-inheritance.test.9-rectangle",
        "peekOfCode": "class Rectangle(BaseGeometry):\n    \"\"\"Defines the Rectangle class that inherits from BaseGeometry.\"\"\"\n    def __init__(self, width, height):\n        \"\"\"Checks and sets the default attributes of Rectangle class.\"\"\"\n        self.integer_validator(\"width\", width)\n        self.__width = width\n        self.integer_validator(\"height\", height)\n        self.__height = height\n    def __str__(self):\n        \"\"\"Sets the str behaviour.\"\"\"",
        "detail": "0x0A-python-inheritance.test.9-rectangle",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.test.9-rectangle",
        "description": "0x0A-python-inheritance.test.9-rectangle",
        "peekOfCode": "BaseGeometry = __import__('7-base_geometry').BaseGeometry\nclass Rectangle(BaseGeometry):\n    \"\"\"Defines the Rectangle class that inherits from BaseGeometry.\"\"\"\n    def __init__(self, width, height):\n        \"\"\"Checks and sets the default attributes of Rectangle class.\"\"\"\n        self.integer_validator(\"width\", width)\n        self.__width = width\n        self.integer_validator(\"height\", height)\n        self.__height = height\n    def __str__(self):",
        "detail": "0x0A-python-inheritance.test.9-rectangle",
        "documentation": {}
    },
    {
        "label": "lookup",
        "kind": 2,
        "importPath": "0x0A-python-inheritance.0-lookup",
        "description": "0x0A-python-inheritance.0-lookup",
        "peekOfCode": "def lookup(obj):\n    \"\"\"Returns the list of available attributes and methods of an object\"\"\"\n    return dir(obj)",
        "detail": "0x0A-python-inheritance.0-lookup",
        "documentation": {}
    },
    {
        "label": "MyList",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.1-my_list",
        "description": "0x0A-python-inheritance.1-my_list",
        "peekOfCode": "class MyList(list):\n    \"\"\"a subclass of list\"\"\"\n    def __init__(self):\n        \"\"\"initializes the object\"\"\"\n        super().__init__()\n    def print_sorted(self):\n        \"\"\"prints the sorted list\"\"\"\n        print(sorted(self))",
        "detail": "0x0A-python-inheritance.1-my_list",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.10-square",
        "description": "0x0A-python-inheritance.10-square",
        "peekOfCode": "class Square(Rectangle):\n    \"\"\"Defines the Square class that inherits from Rectangle.\"\"\"\n    def __init__(self, size):\n        \"\"\"Checks and sets the default attributes of Square class.\"\"\"\n        self.integer_validator(\"size\", size)\n        super().__init__(size, size)\n        self.__size = size",
        "detail": "0x0A-python-inheritance.10-square",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.10-square",
        "description": "0x0A-python-inheritance.10-square",
        "peekOfCode": "Rectangle = __import__('9-rectangle').Rectangle\nclass Square(Rectangle):\n    \"\"\"Defines the Square class that inherits from Rectangle.\"\"\"\n    def __init__(self, size):\n        \"\"\"Checks and sets the default attributes of Square class.\"\"\"\n        self.integer_validator(\"size\", size)\n        super().__init__(size, size)\n        self.__size = size",
        "detail": "0x0A-python-inheritance.10-square",
        "documentation": {}
    },
    {
        "label": "MyInt",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.100-my_int",
        "description": "0x0A-python-inheritance.100-my_int",
        "peekOfCode": "class MyInt(int):\n    \"\"\"Defines the MyInt class.\"\"\"\n    def __eq__(self, other):\n        \"\"\"Sets the == behaviour.\"\"\"\n        return int(self) != other\n    def __ne__(self, other):\n        \"\"\"Sets the != behaviour.\"\"\"\n        return int(self) == other",
        "detail": "0x0A-python-inheritance.100-my_int",
        "documentation": {}
    },
    {
        "label": "add_attribute",
        "kind": 2,
        "importPath": "0x0A-python-inheritance.101-add_attribute",
        "description": "0x0A-python-inheritance.101-add_attribute",
        "peekOfCode": "def add_attribute(obj, name, value):\n    \"\"\"Adds a new attribute to an object if it’s possible.\"\"\"\n    if not hasattr(obj, '__dict__'):\n        raise TypeError(\"can't add new attribute\")\n    setattr(obj, name, value)",
        "detail": "0x0A-python-inheritance.101-add_attribute",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.11-square",
        "description": "0x0A-python-inheritance.11-square",
        "peekOfCode": "class Square(Rectangle):\n    \"\"\"Defines the Square class that inherits from Rectangle.\"\"\"\n    def __init__(self, size):\n        \"\"\"Checks and sets the default attributes of Square class.\"\"\"\n        self.integer_validator(\"size\", size)\n        super().__init__(size, size)\n        self.__size = size\n    def __str__(self):\n        \"\"\"Sets the str behaviour.\"\"\"\n        return \"[Square] {:d}/{:d}\".format(self.__size, self.__size)",
        "detail": "0x0A-python-inheritance.11-square",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.11-square",
        "description": "0x0A-python-inheritance.11-square",
        "peekOfCode": "Rectangle = __import__('9-rectangle').Rectangle\nclass Square(Rectangle):\n    \"\"\"Defines the Square class that inherits from Rectangle.\"\"\"\n    def __init__(self, size):\n        \"\"\"Checks and sets the default attributes of Square class.\"\"\"\n        self.integer_validator(\"size\", size)\n        super().__init__(size, size)\n        self.__size = size\n    def __str__(self):\n        \"\"\"Sets the str behaviour.\"\"\"",
        "detail": "0x0A-python-inheritance.11-square",
        "documentation": {}
    },
    {
        "label": "is_same_class",
        "kind": 2,
        "importPath": "0x0A-python-inheritance.2-is_same_class",
        "description": "0x0A-python-inheritance.2-is_same_class",
        "peekOfCode": "def is_same_class(obj, a_class):\n    \"\"\"\n    Returns True if the object is exactly an instance\n    of the specified class ; otherwise False.\n    \"\"\"\n    return type(obj) is a_class",
        "detail": "0x0A-python-inheritance.2-is_same_class",
        "documentation": {}
    },
    {
        "label": "is_kind_of_class",
        "kind": 2,
        "importPath": "0x0A-python-inheritance.3-is_kind_of_class",
        "description": "0x0A-python-inheritance.3-is_kind_of_class",
        "peekOfCode": "def is_kind_of_class(obj, a_class):\n    \"\"\"\n    Returns True if the object is an instance of, or if\n    the object is an instance of a class that inherited\n    from, the specified class ; otherwise False.\n    \"\"\"\n    return isinstance(obj, a_class)",
        "detail": "0x0A-python-inheritance.3-is_kind_of_class",
        "documentation": {}
    },
    {
        "label": "inherits_from",
        "kind": 2,
        "importPath": "0x0A-python-inheritance.4-inherits_from",
        "description": "0x0A-python-inheritance.4-inherits_from",
        "peekOfCode": "def inherits_from(obj, a_class):\n    \"\"\"\n    Returns True if the object is an instance of a\n    class that inherited (directly or indirectly)\n    from the specified class ; otherwise False.\n    \"\"\"\n    return issubclass(type(obj), a_class) and type(obj) is not a_class",
        "detail": "0x0A-python-inheritance.4-inherits_from",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.5-base_geometry",
        "description": "0x0A-python-inheritance.5-base_geometry",
        "peekOfCode": "class BaseGeometry():\n    \"\"\"Defines the BaseGeometry class.\"\"\"",
        "detail": "0x0A-python-inheritance.5-base_geometry",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.6-base_geometry",
        "description": "0x0A-python-inheritance.6-base_geometry",
        "peekOfCode": "class BaseGeometry():\n    \"\"\"Defines the BaseGeometry class.\"\"\"\n    def area(self):\n        \"\"\"Raises an Exception.\"\"\"\n        raise Exception(\"area() is not implemented\")",
        "detail": "0x0A-python-inheritance.6-base_geometry",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.7-base_geometry",
        "description": "0x0A-python-inheritance.7-base_geometry",
        "peekOfCode": "class BaseGeometry():\n    \"\"\"Defines the BaseGeometry class.\"\"\"\n    def area(self):\n        \"\"\"Raises an Exception.\"\"\"\n        raise Exception(\"area() is not implemented\")\n    def integer_validator(self, name, value):\n        \"\"\"Validates value.\"\"\"\n        if type(value) is not int:\n            raise TypeError(name + \" must be an integer\")\n        if value <= 0:",
        "detail": "0x0A-python-inheritance.7-base_geometry",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.8-rectangle",
        "description": "0x0A-python-inheritance.8-rectangle",
        "peekOfCode": "class Rectangle(BaseGeometry):\n    \"\"\"Defines the Rectangle class that inherits from BaseGeometry.\"\"\"\n    def __init__(self, width, height):\n        \"\"\"Checks and sets the default attributes of Rectangle class.\"\"\"\n        self.integer_validator(\"width\", width)\n        self.integer_validator(\"height\", height)\n        self.__width = width\n        self.__height = height",
        "detail": "0x0A-python-inheritance.8-rectangle",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.8-rectangle",
        "description": "0x0A-python-inheritance.8-rectangle",
        "peekOfCode": "BaseGeometry = __import__('7-base_geometry').BaseGeometry\nclass Rectangle(BaseGeometry):\n    \"\"\"Defines the Rectangle class that inherits from BaseGeometry.\"\"\"\n    def __init__(self, width, height):\n        \"\"\"Checks and sets the default attributes of Rectangle class.\"\"\"\n        self.integer_validator(\"width\", width)\n        self.integer_validator(\"height\", height)\n        self.__width = width\n        self.__height = height",
        "detail": "0x0A-python-inheritance.8-rectangle",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x0A-python-inheritance.9-rectangle",
        "description": "0x0A-python-inheritance.9-rectangle",
        "peekOfCode": "class Rectangle(BaseGeometry):\n    \"\"\"Defines the Rectangle class that inherits from BaseGeometry.\"\"\"\n    def __init__(self, width, height):\n        \"\"\"Checks and sets the default attributes of Rectangle class.\"\"\"\n        self.integer_validator(\"width\", width)\n        self.__width = width\n        self.integer_validator(\"height\", height)\n        self.__height = height\n    def __str__(self):\n        \"\"\"Sets the str behaviour.\"\"\"",
        "detail": "0x0A-python-inheritance.9-rectangle",
        "documentation": {}
    },
    {
        "label": "BaseGeometry",
        "kind": 5,
        "importPath": "0x0A-python-inheritance.9-rectangle",
        "description": "0x0A-python-inheritance.9-rectangle",
        "peekOfCode": "BaseGeometry = __import__('7-base_geometry').BaseGeometry\nclass Rectangle(BaseGeometry):\n    \"\"\"Defines the Rectangle class that inherits from BaseGeometry.\"\"\"\n    def __init__(self, width, height):\n        \"\"\"Checks and sets the default attributes of Rectangle class.\"\"\"\n        self.integer_validator(\"width\", width)\n        self.__width = width\n        self.integer_validator(\"height\", height)\n        self.__height = height\n    def __str__(self):",
        "detail": "0x0A-python-inheritance.9-rectangle",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.number_0.0-main",
        "description": "0x0B-python-input_output.test.number_0.0-main",
        "peekOfCode": "read_file = __import__('0-read_file').read_file\nread_file(\"my_file_0.txt\")",
        "detail": "0x0B-python-input_output.test.number_0.0-main",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.number_0.0-read_file",
        "description": "0x0B-python-input_output.test.number_0.0-read_file",
        "peekOfCode": "def read_file(filename=\"\"):\n    \"\"\"Print the contents of a UTF8 text file to stdout.\"\"\"\n    with open(filename, encoding=\"utf-8\") as f:\n        print(f.read(), end=\"\")",
        "detail": "0x0B-python-input_output.test.number_0.0-read_file",
        "documentation": {}
    },
    {
        "label": "write_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.1-main",
        "description": "0x0B-python-input_output.test.1-main",
        "peekOfCode": "write_file = __import__('1-write_file').write_file\nnb_characters = write_file(\"my_first_file.txt\", \"This School is so cool!\\n\")\nprint(nb_characters)",
        "detail": "0x0B-python-input_output.test.1-main",
        "documentation": {}
    },
    {
        "label": "nb_characters",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.1-main",
        "description": "0x0B-python-input_output.test.1-main",
        "peekOfCode": "nb_characters = write_file(\"my_first_file.txt\", \"This School is so cool!\\n\")\nprint(nb_characters)",
        "detail": "0x0B-python-input_output.test.1-main",
        "documentation": {}
    },
    {
        "label": "write_file",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.1-write_file",
        "description": "0x0B-python-input_output.test.1-write_file",
        "peekOfCode": "def write_file(filename=\"\", text=\"\"):\n    \"\"\"Write a string to a UTF8 text file.\n    Args:\n        filename (str): The name of the file to write.\n        text (str): The text to write to the file.\n    Returns:\n        The number of characters written.\n    \"\"\"\n    with open(filename, \"w\", encoding=\"utf-8\") as f:\n        return f.write(text)",
        "detail": "0x0B-python-input_output.test.1-write_file",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.10-main",
        "description": "0x0B-python-input_output.test.10-main",
        "peekOfCode": "Student = __import__('10-student').Student\nstudent_1 = Student(\"John\", \"Doe\", 23)\nstudent_2 = Student(\"Bob\", \"Dylan\", 27)\nj_student_1 = student_1.to_json()\nj_student_2 = student_2.to_json(['first_name', 'age'])\nj_student_3 = student_2.to_json(['middle_name', 'age'])\nprint(j_student_1)\nprint(j_student_2)\nprint(j_student_3)",
        "detail": "0x0B-python-input_output.test.10-main",
        "documentation": {}
    },
    {
        "label": "student_1",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.10-main",
        "description": "0x0B-python-input_output.test.10-main",
        "peekOfCode": "student_1 = Student(\"John\", \"Doe\", 23)\nstudent_2 = Student(\"Bob\", \"Dylan\", 27)\nj_student_1 = student_1.to_json()\nj_student_2 = student_2.to_json(['first_name', 'age'])\nj_student_3 = student_2.to_json(['middle_name', 'age'])\nprint(j_student_1)\nprint(j_student_2)\nprint(j_student_3)",
        "detail": "0x0B-python-input_output.test.10-main",
        "documentation": {}
    },
    {
        "label": "student_2",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.10-main",
        "description": "0x0B-python-input_output.test.10-main",
        "peekOfCode": "student_2 = Student(\"Bob\", \"Dylan\", 27)\nj_student_1 = student_1.to_json()\nj_student_2 = student_2.to_json(['first_name', 'age'])\nj_student_3 = student_2.to_json(['middle_name', 'age'])\nprint(j_student_1)\nprint(j_student_2)\nprint(j_student_3)",
        "detail": "0x0B-python-input_output.test.10-main",
        "documentation": {}
    },
    {
        "label": "j_student_1",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.10-main",
        "description": "0x0B-python-input_output.test.10-main",
        "peekOfCode": "j_student_1 = student_1.to_json()\nj_student_2 = student_2.to_json(['first_name', 'age'])\nj_student_3 = student_2.to_json(['middle_name', 'age'])\nprint(j_student_1)\nprint(j_student_2)\nprint(j_student_3)",
        "detail": "0x0B-python-input_output.test.10-main",
        "documentation": {}
    },
    {
        "label": "j_student_2",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.10-main",
        "description": "0x0B-python-input_output.test.10-main",
        "peekOfCode": "j_student_2 = student_2.to_json(['first_name', 'age'])\nj_student_3 = student_2.to_json(['middle_name', 'age'])\nprint(j_student_1)\nprint(j_student_2)\nprint(j_student_3)",
        "detail": "0x0B-python-input_output.test.10-main",
        "documentation": {}
    },
    {
        "label": "j_student_3",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.10-main",
        "description": "0x0B-python-input_output.test.10-main",
        "peekOfCode": "j_student_3 = student_2.to_json(['middle_name', 'age'])\nprint(j_student_1)\nprint(j_student_2)\nprint(j_student_3)",
        "detail": "0x0B-python-input_output.test.10-main",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "0x0B-python-input_output.test.10-student",
        "description": "0x0B-python-input_output.test.10-student",
        "peekOfCode": "class Student:\n    \"\"\"Represent a student.\"\"\"\n    def __init__(self, first_name, last_name, age):\n        \"\"\"Initialize a new Student.\n        Args:\n            first_name (str): The first name of the student.\n            last_name (str): The last name of the student.\n            age (int): The age of the student.\n        \"\"\"\n        self.first_name = first_name",
        "detail": "0x0B-python-input_output.test.10-student",
        "documentation": {}
    },
    {
        "label": "append_after",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.100-append_after",
        "description": "0x0B-python-input_output.test.100-append_after",
        "peekOfCode": "def append_after(filename=\"\", search_string=\"\", new_string=\"\"):\n    \"\"\"Insert text after each line containing a given string in a file.\n    Args:\n        filename (str): The name of the file.\n        search_string (str): The string to search for within the file.\n        new_string (str): The string to insert.\n    \"\"\"\n    text = \"\"\n    with open(filename) as r:\n        for line in r:",
        "detail": "0x0B-python-input_output.test.100-append_after",
        "documentation": {}
    },
    {
        "label": "append_after",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.100-main",
        "description": "0x0B-python-input_output.test.100-main",
        "peekOfCode": "append_after = __import__('100-append_after').append_after\nappend_after(\"append_after_100.txt\", \"Python\", \"\\\"C is fun!\\\"\\n\")",
        "detail": "0x0B-python-input_output.test.100-main",
        "documentation": {}
    },
    {
        "label": "file_size",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.101-stats",
        "description": "0x0B-python-input_output.test.101-stats",
        "peekOfCode": "file_size = 0\nstatus_tally = {\"200\": 0, \"301\": 0, \"400\": 0, \"401\": 0,\n                \"403\": 0, \"404\": 0, \"405\": 0, \"500\": 0}\ni = 0\ntry:\n    for line in sys.stdin:\n        tokens = line.split()\n        if len(tokens) >= 2:\n            a = i\n            if tokens[-2] in status_tally:",
        "detail": "0x0B-python-input_output.test.101-stats",
        "documentation": {}
    },
    {
        "label": "status_tally",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.101-stats",
        "description": "0x0B-python-input_output.test.101-stats",
        "peekOfCode": "status_tally = {\"200\": 0, \"301\": 0, \"400\": 0, \"401\": 0,\n                \"403\": 0, \"404\": 0, \"405\": 0, \"500\": 0}\ni = 0\ntry:\n    for line in sys.stdin:\n        tokens = line.split()\n        if len(tokens) >= 2:\n            a = i\n            if tokens[-2] in status_tally:\n                status_tally[tokens[-2]] += 1",
        "detail": "0x0B-python-input_output.test.101-stats",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.101-stats",
        "description": "0x0B-python-input_output.test.101-stats",
        "peekOfCode": "i = 0\ntry:\n    for line in sys.stdin:\n        tokens = line.split()\n        if len(tokens) >= 2:\n            a = i\n            if tokens[-2] in status_tally:\n                status_tally[tokens[-2]] += 1\n                i += 1\n            try:",
        "detail": "0x0B-python-input_output.test.101-stats",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.11-main",
        "description": "0x0B-python-input_output.test.11-main",
        "peekOfCode": "Student = __import__('11-student').Student\nread_file = __import__('0-read_file').read_file\nsave_to_json_file = __import__('5-save_to_json_file').save_to_json_file\nload_from_json_file = __import__('6-load_from_json_file').load_from_json_file\npath = sys.argv[1]\nif os.path.exists(path):\n    os.remove(path)\nstudent_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")",
        "detail": "0x0B-python-input_output.test.11-main",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.11-main",
        "description": "0x0B-python-input_output.test.11-main",
        "peekOfCode": "read_file = __import__('0-read_file').read_file\nsave_to_json_file = __import__('5-save_to_json_file').save_to_json_file\nload_from_json_file = __import__('6-load_from_json_file').load_from_json_file\npath = sys.argv[1]\nif os.path.exists(path):\n    os.remove(path)\nstudent_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)",
        "detail": "0x0B-python-input_output.test.11-main",
        "documentation": {}
    },
    {
        "label": "save_to_json_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.11-main",
        "description": "0x0B-python-input_output.test.11-main",
        "peekOfCode": "save_to_json_file = __import__('5-save_to_json_file').save_to_json_file\nload_from_json_file = __import__('6-load_from_json_file').load_from_json_file\npath = sys.argv[1]\nif os.path.exists(path):\n    os.remove(path)\nstudent_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)\nprint(type(student_1))",
        "detail": "0x0B-python-input_output.test.11-main",
        "documentation": {}
    },
    {
        "label": "load_from_json_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.11-main",
        "description": "0x0B-python-input_output.test.11-main",
        "peekOfCode": "load_from_json_file = __import__('6-load_from_json_file').load_from_json_file\npath = sys.argv[1]\nif os.path.exists(path):\n    os.remove(path)\nstudent_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)\nprint(type(student_1))\nprint(type(j_student_1))",
        "detail": "0x0B-python-input_output.test.11-main",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.11-main",
        "description": "0x0B-python-input_output.test.11-main",
        "peekOfCode": "path = sys.argv[1]\nif os.path.exists(path):\n    os.remove(path)\nstudent_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)\nprint(type(student_1))\nprint(type(j_student_1))\nprint(\"{} {} {}\".format(student_1.first_name, student_1.last_name, student_1.age))",
        "detail": "0x0B-python-input_output.test.11-main",
        "documentation": {}
    },
    {
        "label": "student_1",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.11-main",
        "description": "0x0B-python-input_output.test.11-main",
        "peekOfCode": "student_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)\nprint(type(student_1))\nprint(type(j_student_1))\nprint(\"{} {} {}\".format(student_1.first_name, student_1.last_name, student_1.age))\nsave_to_json_file(j_student_1, path)\nread_file(path)\nprint(\"\\nSaved to disk\")",
        "detail": "0x0B-python-input_output.test.11-main",
        "documentation": {}
    },
    {
        "label": "j_student_1",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.11-main",
        "description": "0x0B-python-input_output.test.11-main",
        "peekOfCode": "j_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)\nprint(type(student_1))\nprint(type(j_student_1))\nprint(\"{} {} {}\".format(student_1.first_name, student_1.last_name, student_1.age))\nsave_to_json_file(j_student_1, path)\nread_file(path)\nprint(\"\\nSaved to disk\")\nprint(\"Fake student:\")",
        "detail": "0x0B-python-input_output.test.11-main",
        "documentation": {}
    },
    {
        "label": "new_student_1",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.11-main",
        "description": "0x0B-python-input_output.test.11-main",
        "peekOfCode": "new_student_1 = Student(\"Fake\", \"Fake\", 89)\nprint(new_student_1)\nprint(type(new_student_1))\nprint(\"{} {} {}\".format(new_student_1.first_name, new_student_1.last_name, new_student_1.age))\nprint(\"Load dictionary from file:\")\nnew_j_student_1 = load_from_json_file(path)\nnew_student_1.reload_from_json(j_student_1)\nprint(new_student_1)\nprint(type(new_student_1))\nprint(\"{} {} {}\".format(new_student_1.first_name, new_student_1.last_name, new_student_1.age))",
        "detail": "0x0B-python-input_output.test.11-main",
        "documentation": {}
    },
    {
        "label": "new_j_student_1",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.11-main",
        "description": "0x0B-python-input_output.test.11-main",
        "peekOfCode": "new_j_student_1 = load_from_json_file(path)\nnew_student_1.reload_from_json(j_student_1)\nprint(new_student_1)\nprint(type(new_student_1))\nprint(\"{} {} {}\".format(new_student_1.first_name, new_student_1.last_name, new_student_1.age))",
        "detail": "0x0B-python-input_output.test.11-main",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "0x0B-python-input_output.test.11-student",
        "description": "0x0B-python-input_output.test.11-student",
        "peekOfCode": "class Student:\n    \"\"\"Represent a student.\"\"\"\n    def __init__(self, first_name, last_name, age):\n        \"\"\"Initialize a new Student.\n        Args:\n            first_name (str): The first name of the student.\n            last_name (str): The last name of the student.\n            age (int): The age of the student.\n        \"\"\"\n        self.first_name = first_name",
        "detail": "0x0B-python-input_output.test.11-student",
        "documentation": {}
    },
    {
        "label": "print_triangle",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.12-main",
        "description": "0x0B-python-input_output.test.12-main",
        "peekOfCode": "def print_triangle(triangle):\n    \"\"\"\n    Print the triangle\n    \"\"\"\n    for row in triangle:\n        print(\"[{}]\".format(\",\".join([str(x) for x in row])))\nif __name__ == \"__main__\":\n    print_triangle(pascal_triangle(5))",
        "detail": "0x0B-python-input_output.test.12-main",
        "documentation": {}
    },
    {
        "label": "pascal_triangle",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.12-main",
        "description": "0x0B-python-input_output.test.12-main",
        "peekOfCode": "pascal_triangle = __import__('12-pascal_triangle').pascal_triangle\ndef print_triangle(triangle):\n    \"\"\"\n    Print the triangle\n    \"\"\"\n    for row in triangle:\n        print(\"[{}]\".format(\",\".join([str(x) for x in row])))\nif __name__ == \"__main__\":\n    print_triangle(pascal_triangle(5))",
        "detail": "0x0B-python-input_output.test.12-main",
        "documentation": {}
    },
    {
        "label": "pascal_triangle",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.12-pascal_triangle",
        "description": "0x0B-python-input_output.test.12-pascal_triangle",
        "peekOfCode": "def pascal_triangle(n):\n    \"\"\"Represent Pascal's Triangle of size n.\n    Returns a list of lists of integers representing the triangle.\n    \"\"\"\n    if n <= 0:\n        return []\n    triangles = [[1]]\n    while len(triangles) != n:\n        tri = triangles[-1]\n        tmp = [1]",
        "detail": "0x0B-python-input_output.test.12-pascal_triangle",
        "documentation": {}
    },
    {
        "label": "append_write",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.2-append_write",
        "description": "0x0B-python-input_output.test.2-append_write",
        "peekOfCode": "def append_write(filename=\"\", text=\"\"):\n    \"\"\"Appends a string to the end of a UTF8 text file.\n    Args:\n        filename (str): The name of the file to append to.\n        text (str): The string to append to the file.\n    Returns:\n        The number of characters appended.\n    \"\"\"\n    with open(filename, \"a\", encoding=\"utf-8\") as f:\n        return f.write(text)",
        "detail": "0x0B-python-input_output.test.2-append_write",
        "documentation": {}
    },
    {
        "label": "append_write",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.2-main",
        "description": "0x0B-python-input_output.test.2-main",
        "peekOfCode": "append_write = __import__('2-append_write').append_write\nnb_characters_added = append_write(\"file_append.txt\", \"This School is so cool!\\n\")\nprint(nb_characters_added)",
        "detail": "0x0B-python-input_output.test.2-main",
        "documentation": {}
    },
    {
        "label": "nb_characters_added",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.2-main",
        "description": "0x0B-python-input_output.test.2-main",
        "peekOfCode": "nb_characters_added = append_write(\"file_append.txt\", \"This School is so cool!\\n\")\nprint(nb_characters_added)",
        "detail": "0x0B-python-input_output.test.2-main",
        "documentation": {}
    },
    {
        "label": "to_json_string",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.3-main",
        "description": "0x0B-python-input_output.test.3-main",
        "peekOfCode": "to_json_string = __import__('3-to_json_string').to_json_string\nmy_list = [1, 2, 3]\ns_my_list = to_json_string(my_list)\nprint(s_my_list)\nprint(type(s_my_list))\nmy_dict = { \n    'id': 12,\n    'name': \"John\",\n    'places': [ \"San Francisco\", \"Tokyo\" ],\n    'is_active': True,",
        "detail": "0x0B-python-input_output.test.3-main",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.3-main",
        "description": "0x0B-python-input_output.test.3-main",
        "peekOfCode": "my_list = [1, 2, 3]\ns_my_list = to_json_string(my_list)\nprint(s_my_list)\nprint(type(s_my_list))\nmy_dict = { \n    'id': 12,\n    'name': \"John\",\n    'places': [ \"San Francisco\", \"Tokyo\" ],\n    'is_active': True,\n    'info': {",
        "detail": "0x0B-python-input_output.test.3-main",
        "documentation": {}
    },
    {
        "label": "s_my_list",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.3-main",
        "description": "0x0B-python-input_output.test.3-main",
        "peekOfCode": "s_my_list = to_json_string(my_list)\nprint(s_my_list)\nprint(type(s_my_list))\nmy_dict = { \n    'id': 12,\n    'name': \"John\",\n    'places': [ \"San Francisco\", \"Tokyo\" ],\n    'is_active': True,\n    'info': {\n        'age': 36,",
        "detail": "0x0B-python-input_output.test.3-main",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.3-main",
        "description": "0x0B-python-input_output.test.3-main",
        "peekOfCode": "my_dict = { \n    'id': 12,\n    'name': \"John\",\n    'places': [ \"San Francisco\", \"Tokyo\" ],\n    'is_active': True,\n    'info': {\n        'age': 36,\n        'average': 3.14\n    }\n}",
        "detail": "0x0B-python-input_output.test.3-main",
        "documentation": {}
    },
    {
        "label": "s_my_dict",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.3-main",
        "description": "0x0B-python-input_output.test.3-main",
        "peekOfCode": "s_my_dict = to_json_string(my_dict)\nprint(s_my_dict)\nprint(type(s_my_dict))\ntry:\n    my_set = { 132, 3 }\n    s_my_set = to_json_string(my_set)\n    print(s_my_set)\n    print(type(s_my_set))\nexcept Exception as e:\n    print(\"[{}] {}\".format(e.__class__.__name__, e))",
        "detail": "0x0B-python-input_output.test.3-main",
        "documentation": {}
    },
    {
        "label": "to_json_string",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.3-to_json_string",
        "description": "0x0B-python-input_output.test.3-to_json_string",
        "peekOfCode": "def to_json_string(my_obj):\n    \"\"\"Return the JSON representation of a string object.\"\"\"\n    return json.dumps(my_obj)",
        "detail": "0x0B-python-input_output.test.3-to_json_string",
        "documentation": {}
    },
    {
        "label": "from_json_string",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.4-from_json_string",
        "description": "0x0B-python-input_output.test.4-from_json_string",
        "peekOfCode": "def from_json_string(my_str):\n    \"\"\"Return the Python object representation of a JSON string.\"\"\"\n    return json.loads(my_str)",
        "detail": "0x0B-python-input_output.test.4-from_json_string",
        "documentation": {}
    },
    {
        "label": "from_json_string",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.4-main",
        "description": "0x0B-python-input_output.test.4-main",
        "peekOfCode": "from_json_string = __import__('4-from_json_string').from_json_string\ns_my_list = \"[1, 2, 3]\"\nmy_list = from_json_string(s_my_list)\nprint(my_list)\nprint(type(my_list))\ns_my_dict = \"\"\"\n{\"is_active\": true, \"info\": {\"age\": 36, \"average\": 3.14}, \n\"id\": 12, \"name\": \"John\", \"places\": [\"San Francisco\", \"Tokyo\"]}\n\"\"\"\nmy_dict = from_json_string(s_my_dict)",
        "detail": "0x0B-python-input_output.test.4-main",
        "documentation": {}
    },
    {
        "label": "s_my_list",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.4-main",
        "description": "0x0B-python-input_output.test.4-main",
        "peekOfCode": "s_my_list = \"[1, 2, 3]\"\nmy_list = from_json_string(s_my_list)\nprint(my_list)\nprint(type(my_list))\ns_my_dict = \"\"\"\n{\"is_active\": true, \"info\": {\"age\": 36, \"average\": 3.14}, \n\"id\": 12, \"name\": \"John\", \"places\": [\"San Francisco\", \"Tokyo\"]}\n\"\"\"\nmy_dict = from_json_string(s_my_dict)\nprint(my_dict)",
        "detail": "0x0B-python-input_output.test.4-main",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.4-main",
        "description": "0x0B-python-input_output.test.4-main",
        "peekOfCode": "my_list = from_json_string(s_my_list)\nprint(my_list)\nprint(type(my_list))\ns_my_dict = \"\"\"\n{\"is_active\": true, \"info\": {\"age\": 36, \"average\": 3.14}, \n\"id\": 12, \"name\": \"John\", \"places\": [\"San Francisco\", \"Tokyo\"]}\n\"\"\"\nmy_dict = from_json_string(s_my_dict)\nprint(my_dict)\nprint(type(my_dict))",
        "detail": "0x0B-python-input_output.test.4-main",
        "documentation": {}
    },
    {
        "label": "s_my_dict",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.4-main",
        "description": "0x0B-python-input_output.test.4-main",
        "peekOfCode": "s_my_dict = \"\"\"\n{\"is_active\": true, \"info\": {\"age\": 36, \"average\": 3.14}, \n\"id\": 12, \"name\": \"John\", \"places\": [\"San Francisco\", \"Tokyo\"]}\n\"\"\"\nmy_dict = from_json_string(s_my_dict)\nprint(my_dict)\nprint(type(my_dict))\ntry:\n    s_my_dict = \"\"\"\n    {\"is_active\": true, 12 }",
        "detail": "0x0B-python-input_output.test.4-main",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.4-main",
        "description": "0x0B-python-input_output.test.4-main",
        "peekOfCode": "my_dict = from_json_string(s_my_dict)\nprint(my_dict)\nprint(type(my_dict))\ntry:\n    s_my_dict = \"\"\"\n    {\"is_active\": true, 12 }\n    \"\"\"\n    my_dict = from_json_string(s_my_dict)\n    print(my_dict)\n    print(type(my_dict))",
        "detail": "0x0B-python-input_output.test.4-main",
        "documentation": {}
    },
    {
        "label": "save_to_json_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.5-main",
        "description": "0x0B-python-input_output.test.5-main",
        "peekOfCode": "save_to_json_file = __import__('5-save_to_json_file').save_to_json_file\nfilename = \"my_list.json\"\nmy_list = [1, 2, 3]\nsave_to_json_file(my_list, filename)\nfilename = \"my_dict.json\"\nmy_dict = { \n    'id': 12,\n    'name': \"John\",\n    'places': [ \"San Francisco\", \"Tokyo\" ],\n    'is_active': True,",
        "detail": "0x0B-python-input_output.test.5-main",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.5-main",
        "description": "0x0B-python-input_output.test.5-main",
        "peekOfCode": "filename = \"my_list.json\"\nmy_list = [1, 2, 3]\nsave_to_json_file(my_list, filename)\nfilename = \"my_dict.json\"\nmy_dict = { \n    'id': 12,\n    'name': \"John\",\n    'places': [ \"San Francisco\", \"Tokyo\" ],\n    'is_active': True,\n    'info': {",
        "detail": "0x0B-python-input_output.test.5-main",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.5-main",
        "description": "0x0B-python-input_output.test.5-main",
        "peekOfCode": "my_list = [1, 2, 3]\nsave_to_json_file(my_list, filename)\nfilename = \"my_dict.json\"\nmy_dict = { \n    'id': 12,\n    'name': \"John\",\n    'places': [ \"San Francisco\", \"Tokyo\" ],\n    'is_active': True,\n    'info': {\n        'age': 36,",
        "detail": "0x0B-python-input_output.test.5-main",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.5-main",
        "description": "0x0B-python-input_output.test.5-main",
        "peekOfCode": "filename = \"my_dict.json\"\nmy_dict = { \n    'id': 12,\n    'name': \"John\",\n    'places': [ \"San Francisco\", \"Tokyo\" ],\n    'is_active': True,\n    'info': {\n        'age': 36,\n        'average': 3.14\n    }",
        "detail": "0x0B-python-input_output.test.5-main",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.5-main",
        "description": "0x0B-python-input_output.test.5-main",
        "peekOfCode": "my_dict = { \n    'id': 12,\n    'name': \"John\",\n    'places': [ \"San Francisco\", \"Tokyo\" ],\n    'is_active': True,\n    'info': {\n        'age': 36,\n        'average': 3.14\n    }\n}",
        "detail": "0x0B-python-input_output.test.5-main",
        "documentation": {}
    },
    {
        "label": "save_to_json_file",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.5-save_to_json_file",
        "description": "0x0B-python-input_output.test.5-save_to_json_file",
        "peekOfCode": "def save_to_json_file(my_obj, filename):\n    \"\"\"Write an object to a text file using JSON representation.\"\"\"\n    with open(filename, \"w\") as f:\n        json.dump(my_obj, f)",
        "detail": "0x0B-python-input_output.test.5-save_to_json_file",
        "documentation": {}
    },
    {
        "label": "load_from_json_file",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.6-load_from_json_file",
        "description": "0x0B-python-input_output.test.6-load_from_json_file",
        "peekOfCode": "def load_from_json_file(filename):\n    \"\"\"Create a Python object from a JSON file.\"\"\"\n    with open(filename) as f:\n        return json.load(f)",
        "detail": "0x0B-python-input_output.test.6-load_from_json_file",
        "documentation": {}
    },
    {
        "label": "load_from_json_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.6-main",
        "description": "0x0B-python-input_output.test.6-main",
        "peekOfCode": "load_from_json_file = __import__('6-load_from_json_file').load_from_json_file\nfilename = \"my_list.json\"\nmy_list = load_from_json_file(filename)\nprint(my_list)\nprint(type(my_list))\nfilename = \"my_dict.json\"\nmy_dict = load_from_json_file(filename)\nprint(my_dict)\nprint(type(my_dict))\ntry:",
        "detail": "0x0B-python-input_output.test.6-main",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.6-main",
        "description": "0x0B-python-input_output.test.6-main",
        "peekOfCode": "filename = \"my_list.json\"\nmy_list = load_from_json_file(filename)\nprint(my_list)\nprint(type(my_list))\nfilename = \"my_dict.json\"\nmy_dict = load_from_json_file(filename)\nprint(my_dict)\nprint(type(my_dict))\ntry:\n    filename = \"my_set_doesnt_exist.json\"",
        "detail": "0x0B-python-input_output.test.6-main",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.6-main",
        "description": "0x0B-python-input_output.test.6-main",
        "peekOfCode": "my_list = load_from_json_file(filename)\nprint(my_list)\nprint(type(my_list))\nfilename = \"my_dict.json\"\nmy_dict = load_from_json_file(filename)\nprint(my_dict)\nprint(type(my_dict))\ntry:\n    filename = \"my_set_doesnt_exist.json\"\n    my_set = load_from_json_file(filename)",
        "detail": "0x0B-python-input_output.test.6-main",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.6-main",
        "description": "0x0B-python-input_output.test.6-main",
        "peekOfCode": "filename = \"my_dict.json\"\nmy_dict = load_from_json_file(filename)\nprint(my_dict)\nprint(type(my_dict))\ntry:\n    filename = \"my_set_doesnt_exist.json\"\n    my_set = load_from_json_file(filename)\n    print(my_set)\n    print(type(my_set))\nexcept Exception as e:",
        "detail": "0x0B-python-input_output.test.6-main",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.6-main",
        "description": "0x0B-python-input_output.test.6-main",
        "peekOfCode": "my_dict = load_from_json_file(filename)\nprint(my_dict)\nprint(type(my_dict))\ntry:\n    filename = \"my_set_doesnt_exist.json\"\n    my_set = load_from_json_file(filename)\n    print(my_set)\n    print(type(my_set))\nexcept Exception as e:\n    print(\"[{}] {}\".format(e.__class__.__name__, e))",
        "detail": "0x0B-python-input_output.test.6-main",
        "documentation": {}
    },
    {
        "label": "save_to_json_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.7-add_item",
        "description": "0x0B-python-input_output.test.7-add_item",
        "peekOfCode": "save_to_json_file = __import__(\"5-save_to_json_file\").save_to_json_file\nload_from_json_file = __import__(\"6-load_from_json_file\").load_from_json_file\nfilename = \"add_item.json\"\ntry:\n    json_list = load_from_json_file(filename)\nexcept Exception:\n    json_list = []\nfor arg in argv[1:]:\n    json_list.append(arg)\nsave_to_json_file(json_list, filename)",
        "detail": "0x0B-python-input_output.test.7-add_item",
        "documentation": {}
    },
    {
        "label": "load_from_json_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.7-add_item",
        "description": "0x0B-python-input_output.test.7-add_item",
        "peekOfCode": "load_from_json_file = __import__(\"6-load_from_json_file\").load_from_json_file\nfilename = \"add_item.json\"\ntry:\n    json_list = load_from_json_file(filename)\nexcept Exception:\n    json_list = []\nfor arg in argv[1:]:\n    json_list.append(arg)\nsave_to_json_file(json_list, filename)",
        "detail": "0x0B-python-input_output.test.7-add_item",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.7-add_item",
        "description": "0x0B-python-input_output.test.7-add_item",
        "peekOfCode": "filename = \"add_item.json\"\ntry:\n    json_list = load_from_json_file(filename)\nexcept Exception:\n    json_list = []\nfor arg in argv[1:]:\n    json_list.append(arg)\nsave_to_json_file(json_list, filename)",
        "detail": "0x0B-python-input_output.test.7-add_item",
        "documentation": {}
    },
    {
        "label": "class_to_json",
        "kind": 2,
        "importPath": "0x0B-python-input_output.test.8-class_to_json",
        "description": "0x0B-python-input_output.test.8-class_to_json",
        "peekOfCode": "def class_to_json(obj):\n    \"\"\"Return the dictionary represntation of a simple data structure.\"\"\"\n    return obj.__dict__",
        "detail": "0x0B-python-input_output.test.8-class_to_json",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.8-main",
        "description": "0x0B-python-input_output.test.8-main",
        "peekOfCode": "MyClass = __import__('8-my_class').MyClass\nclass_to_json = __import__('8-class_to_json').class_to_json\nm = MyClass(\"John\")\nm.number = 89\nprint(type(m))\nprint(m)\nmj = class_to_json(m)\nprint(type(mj))\nprint(mj)",
        "detail": "0x0B-python-input_output.test.8-main",
        "documentation": {}
    },
    {
        "label": "class_to_json",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.8-main",
        "description": "0x0B-python-input_output.test.8-main",
        "peekOfCode": "class_to_json = __import__('8-class_to_json').class_to_json\nm = MyClass(\"John\")\nm.number = 89\nprint(type(m))\nprint(m)\nmj = class_to_json(m)\nprint(type(mj))\nprint(mj)",
        "detail": "0x0B-python-input_output.test.8-main",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.8-main",
        "description": "0x0B-python-input_output.test.8-main",
        "peekOfCode": "m = MyClass(\"John\")\nm.number = 89\nprint(type(m))\nprint(m)\nmj = class_to_json(m)\nprint(type(mj))\nprint(mj)",
        "detail": "0x0B-python-input_output.test.8-main",
        "documentation": {}
    },
    {
        "label": "m.number",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.8-main",
        "description": "0x0B-python-input_output.test.8-main",
        "peekOfCode": "m.number = 89\nprint(type(m))\nprint(m)\nmj = class_to_json(m)\nprint(type(mj))\nprint(mj)",
        "detail": "0x0B-python-input_output.test.8-main",
        "documentation": {}
    },
    {
        "label": "mj",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.8-main",
        "description": "0x0B-python-input_output.test.8-main",
        "peekOfCode": "mj = class_to_json(m)\nprint(type(mj))\nprint(mj)",
        "detail": "0x0B-python-input_output.test.8-main",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.8-main_2",
        "description": "0x0B-python-input_output.test.8-main_2",
        "peekOfCode": "MyClass = __import__('8-my_class_2').MyClass\nclass_to_json = __import__('8-class_to_json').class_to_json\nm = MyClass(\"John\")\nm.win()\nprint(type(m))\nprint(m)\nmj = class_to_json(m)\nprint(type(mj))\nprint(mj)",
        "detail": "0x0B-python-input_output.test.8-main_2",
        "documentation": {}
    },
    {
        "label": "class_to_json",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.8-main_2",
        "description": "0x0B-python-input_output.test.8-main_2",
        "peekOfCode": "class_to_json = __import__('8-class_to_json').class_to_json\nm = MyClass(\"John\")\nm.win()\nprint(type(m))\nprint(m)\nmj = class_to_json(m)\nprint(type(mj))\nprint(mj)",
        "detail": "0x0B-python-input_output.test.8-main_2",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.8-main_2",
        "description": "0x0B-python-input_output.test.8-main_2",
        "peekOfCode": "m = MyClass(\"John\")\nm.win()\nprint(type(m))\nprint(m)\nmj = class_to_json(m)\nprint(type(mj))\nprint(mj)",
        "detail": "0x0B-python-input_output.test.8-main_2",
        "documentation": {}
    },
    {
        "label": "mj",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.8-main_2",
        "description": "0x0B-python-input_output.test.8-main_2",
        "peekOfCode": "mj = class_to_json(m)\nprint(type(mj))\nprint(mj)",
        "detail": "0x0B-python-input_output.test.8-main_2",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "0x0B-python-input_output.test.8-my_class",
        "description": "0x0B-python-input_output.test.8-my_class",
        "peekOfCode": "class MyClass:\n    \"\"\" My class\n    \"\"\"\n    def __init__(self, name):\n        self.name = name\n        self.number = 0\n    def __str__(self):\n        return \"[MyClass] {} - {:d}\".format(self.name, self.number)",
        "detail": "0x0B-python-input_output.test.8-my_class",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "0x0B-python-input_output.test.8-my_class_2",
        "description": "0x0B-python-input_output.test.8-my_class_2",
        "peekOfCode": "class MyClass:\n    \"\"\" My class\n    \"\"\"\n    score = 0\n    def __init__(self, name, number = 4):\n        self.__name = name\n        self.number = number\n        self.is_team_red = (self.number % 2) == 0\n    def win(self):\n        self.score += 1",
        "detail": "0x0B-python-input_output.test.8-my_class_2",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.9-main",
        "description": "0x0B-python-input_output.test.9-main",
        "peekOfCode": "Student = __import__('9-student').Student\nstudents = [Student(\"John\", \"Doe\", 23), Student(\"Bob\", \"Dylan\", 27)]\nfor student in students:\n    j_student = student.to_json()\n    print(type(j_student))\n    print(j_student['first_name'])\n    print(type(j_student['first_name']))\n    print(j_student['age'])\n    print(type(j_student['age']))",
        "detail": "0x0B-python-input_output.test.9-main",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "0x0B-python-input_output.test.9-main",
        "description": "0x0B-python-input_output.test.9-main",
        "peekOfCode": "students = [Student(\"John\", \"Doe\", 23), Student(\"Bob\", \"Dylan\", 27)]\nfor student in students:\n    j_student = student.to_json()\n    print(type(j_student))\n    print(j_student['first_name'])\n    print(type(j_student['first_name']))\n    print(j_student['age'])\n    print(type(j_student['age']))",
        "detail": "0x0B-python-input_output.test.9-main",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "0x0B-python-input_output.test.9-student",
        "description": "0x0B-python-input_output.test.9-student",
        "peekOfCode": "class Student:\n    \"\"\"Represent a student.\"\"\"\n    def __init__(self, first_name, last_name, age):\n        \"\"\"Initialize a new Student.\n        Args:\n            first_name (str): The first name of the student.\n            last_name (str): The last name of the student.\n            age (int): The age of the student.\n        \"\"\"\n        self.first_name = first_name",
        "detail": "0x0B-python-input_output.test.9-student",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 2,
        "importPath": "0x0B-python-input_output.0-read_file",
        "description": "0x0B-python-input_output.0-read_file",
        "peekOfCode": "def read_file(filename=\"\"):\n    \"\"\"Print the contents of a UTF8 text file to stdout.\"\"\"\n    with open(filename, encoding=\"utf-8\") as f:\n        print(f.read(), end=\"\")",
        "detail": "0x0B-python-input_output.0-read_file",
        "documentation": {}
    },
    {
        "label": "write_file",
        "kind": 2,
        "importPath": "0x0B-python-input_output.1-write_file",
        "description": "0x0B-python-input_output.1-write_file",
        "peekOfCode": "def write_file(filename=\"\", text=\"\"):\n    \"\"\"Write a string to a UTF8 text file.\n    Args:\n        filename (str): The name of the file to write.\n        text (str): The text to write to the file.\n    Returns:\n        The number of characters written.\n    \"\"\"\n    with open(filename, \"w\", encoding=\"utf-8\") as f:\n        return f.write(text)",
        "detail": "0x0B-python-input_output.1-write_file",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "0x0B-python-input_output.10-student",
        "description": "0x0B-python-input_output.10-student",
        "peekOfCode": "class Student:\n    \"\"\"Represent a student.\"\"\"\n    def __init__(self, first_name, last_name, age):\n        \"\"\"Initialize a new Student.\n        Args:\n            first_name (str): The first name of the student.\n            last_name (str): The last name of the student.\n            age (int): The age of the student.\n        \"\"\"\n        self.first_name = first_name",
        "detail": "0x0B-python-input_output.10-student",
        "documentation": {}
    },
    {
        "label": "append_after",
        "kind": 2,
        "importPath": "0x0B-python-input_output.100-append_after",
        "description": "0x0B-python-input_output.100-append_after",
        "peekOfCode": "def append_after(filename=\"\", search_string=\"\", new_string=\"\"):\n    \"\"\"Insert text after each line containing a given string in a file.\n    Args:\n        filename (str): The name of the file.\n        search_string (str): The string to search for within the file.\n        new_string (str): The string to insert.\n    \"\"\"\n    text = \"\"\n    with open(filename) as r:\n        for line in r:",
        "detail": "0x0B-python-input_output.100-append_after",
        "documentation": {}
    },
    {
        "label": "file_size",
        "kind": 5,
        "importPath": "0x0B-python-input_output.101-stats",
        "description": "0x0B-python-input_output.101-stats",
        "peekOfCode": "file_size = 0\nstatus_tally = {\"200\": 0, \"301\": 0, \"400\": 0, \"401\": 0,\n                \"403\": 0, \"404\": 0, \"405\": 0, \"500\": 0}\ni = 0\ntry:\n    for line in sys.stdin:\n        tokens = line.split()\n        if len(tokens) >= 2:\n            a = i\n            if tokens[-2] in status_tally:",
        "detail": "0x0B-python-input_output.101-stats",
        "documentation": {}
    },
    {
        "label": "status_tally",
        "kind": 5,
        "importPath": "0x0B-python-input_output.101-stats",
        "description": "0x0B-python-input_output.101-stats",
        "peekOfCode": "status_tally = {\"200\": 0, \"301\": 0, \"400\": 0, \"401\": 0,\n                \"403\": 0, \"404\": 0, \"405\": 0, \"500\": 0}\ni = 0\ntry:\n    for line in sys.stdin:\n        tokens = line.split()\n        if len(tokens) >= 2:\n            a = i\n            if tokens[-2] in status_tally:\n                status_tally[tokens[-2]] += 1",
        "detail": "0x0B-python-input_output.101-stats",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "0x0B-python-input_output.101-stats",
        "description": "0x0B-python-input_output.101-stats",
        "peekOfCode": "i = 0\ntry:\n    for line in sys.stdin:\n        tokens = line.split()\n        if len(tokens) >= 2:\n            a = i\n            if tokens[-2] in status_tally:\n                status_tally[tokens[-2]] += 1\n                i += 1\n            try:",
        "detail": "0x0B-python-input_output.101-stats",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 5,
        "importPath": "0x0B-python-input_output.11-main",
        "description": "0x0B-python-input_output.11-main",
        "peekOfCode": "Student = __import__('11-student').Student\nread_file = __import__('0-read_file').read_file\nsave_to_json_file = __import__('5-save_to_json_file').save_to_json_file\nload_from_json_file = __import__('6-load_from_json_file').load_from_json_file\npath = sys.argv[1]\nif os.path.exists(path):\n    os.remove(path)\nstudent_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")",
        "detail": "0x0B-python-input_output.11-main",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.11-main",
        "description": "0x0B-python-input_output.11-main",
        "peekOfCode": "read_file = __import__('0-read_file').read_file\nsave_to_json_file = __import__('5-save_to_json_file').save_to_json_file\nload_from_json_file = __import__('6-load_from_json_file').load_from_json_file\npath = sys.argv[1]\nif os.path.exists(path):\n    os.remove(path)\nstudent_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)",
        "detail": "0x0B-python-input_output.11-main",
        "documentation": {}
    },
    {
        "label": "save_to_json_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.11-main",
        "description": "0x0B-python-input_output.11-main",
        "peekOfCode": "save_to_json_file = __import__('5-save_to_json_file').save_to_json_file\nload_from_json_file = __import__('6-load_from_json_file').load_from_json_file\npath = sys.argv[1]\nif os.path.exists(path):\n    os.remove(path)\nstudent_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)\nprint(type(student_1))",
        "detail": "0x0B-python-input_output.11-main",
        "documentation": {}
    },
    {
        "label": "load_from_json_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.11-main",
        "description": "0x0B-python-input_output.11-main",
        "peekOfCode": "load_from_json_file = __import__('6-load_from_json_file').load_from_json_file\npath = sys.argv[1]\nif os.path.exists(path):\n    os.remove(path)\nstudent_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)\nprint(type(student_1))\nprint(type(j_student_1))",
        "detail": "0x0B-python-input_output.11-main",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "0x0B-python-input_output.11-main",
        "description": "0x0B-python-input_output.11-main",
        "peekOfCode": "path = sys.argv[1]\nif os.path.exists(path):\n    os.remove(path)\nstudent_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)\nprint(type(student_1))\nprint(type(j_student_1))\nprint(\"{} {} {}\".format(student_1.first_name, student_1.last_name, student_1.age))",
        "detail": "0x0B-python-input_output.11-main",
        "documentation": {}
    },
    {
        "label": "student_1",
        "kind": 5,
        "importPath": "0x0B-python-input_output.11-main",
        "description": "0x0B-python-input_output.11-main",
        "peekOfCode": "student_1 = Student(\"John\", \"Doe\", 23)\nj_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)\nprint(type(student_1))\nprint(type(j_student_1))\nprint(\"{} {} {}\".format(student_1.first_name, student_1.last_name, student_1.age))\nsave_to_json_file(j_student_1, path)\nread_file(path)\nprint(\"\\nSaved to disk\")",
        "detail": "0x0B-python-input_output.11-main",
        "documentation": {}
    },
    {
        "label": "j_student_1",
        "kind": 5,
        "importPath": "0x0B-python-input_output.11-main",
        "description": "0x0B-python-input_output.11-main",
        "peekOfCode": "j_student_1 = student_1.to_json()\nprint(\"Initial student:\")\nprint(student_1)\nprint(type(student_1))\nprint(type(j_student_1))\nprint(\"{} {} {}\".format(student_1.first_name, student_1.last_name, student_1.age))\nsave_to_json_file(j_student_1, path)\nread_file(path)\nprint(\"\\nSaved to disk\")\nprint(\"Fake student:\")",
        "detail": "0x0B-python-input_output.11-main",
        "documentation": {}
    },
    {
        "label": "new_student_1",
        "kind": 5,
        "importPath": "0x0B-python-input_output.11-main",
        "description": "0x0B-python-input_output.11-main",
        "peekOfCode": "new_student_1 = Student(\"Fake\", \"Fake\", 89)\nprint(new_student_1)\nprint(type(new_student_1))\nprint(\"{} {} {}\".format(new_student_1.first_name, new_student_1.last_name, new_student_1.age))\nprint(\"Load dictionary from file:\")\nnew_j_student_1 = load_from_json_file(path)\nnew_student_1.reload_from_json(j_student_1)\nprint(new_student_1)\nprint(type(new_student_1))\nprint(\"{} {} {}\".format(new_student_1.first_name, new_student_1.last_name, new_student_1.age))",
        "detail": "0x0B-python-input_output.11-main",
        "documentation": {}
    },
    {
        "label": "new_j_student_1",
        "kind": 5,
        "importPath": "0x0B-python-input_output.11-main",
        "description": "0x0B-python-input_output.11-main",
        "peekOfCode": "new_j_student_1 = load_from_json_file(path)\nnew_student_1.reload_from_json(j_student_1)\nprint(new_student_1)\nprint(type(new_student_1))\nprint(\"{} {} {}\".format(new_student_1.first_name, new_student_1.last_name, new_student_1.age))",
        "detail": "0x0B-python-input_output.11-main",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "0x0B-python-input_output.11-student",
        "description": "0x0B-python-input_output.11-student",
        "peekOfCode": "class Student:\n    \"\"\"Represent a student.\"\"\"\n    def __init__(self, first_name, last_name, age):\n        \"\"\"Initialize a new Student.\n        Args:\n            first_name (str): The first name of the student.\n            last_name (str): The last name of the student.\n            age (int): The age of the student.\n        \"\"\"\n        self.first_name = first_name",
        "detail": "0x0B-python-input_output.11-student",
        "documentation": {}
    },
    {
        "label": "pascal_triangle",
        "kind": 2,
        "importPath": "0x0B-python-input_output.12-pascal_triangle",
        "description": "0x0B-python-input_output.12-pascal_triangle",
        "peekOfCode": "def pascal_triangle(n):\n    \"\"\"Represent Pascal's Triangle of size n.\n    Returns a list of lists of integers representing the triangle.\n    \"\"\"\n    if n <= 0:\n        return []\n    triangles = [[1]]\n    while len(triangles) != n:\n        tri = triangles[-1]\n        tmp = [1]",
        "detail": "0x0B-python-input_output.12-pascal_triangle",
        "documentation": {}
    },
    {
        "label": "append_write",
        "kind": 2,
        "importPath": "0x0B-python-input_output.2-append_write",
        "description": "0x0B-python-input_output.2-append_write",
        "peekOfCode": "def append_write(filename=\"\", text=\"\"):\n    \"\"\"Appends a string to the end of a UTF8 text file.\n    Args:\n        filename (str): The name of the file to append to.\n        text (str): The string to append to the file.\n    Returns:\n        The number of characters appended.\n    \"\"\"\n    with open(filename, \"a\", encoding=\"utf-8\") as f:\n        return f.write(text)",
        "detail": "0x0B-python-input_output.2-append_write",
        "documentation": {}
    },
    {
        "label": "to_json_string",
        "kind": 2,
        "importPath": "0x0B-python-input_output.3-to_json_string",
        "description": "0x0B-python-input_output.3-to_json_string",
        "peekOfCode": "def to_json_string(my_obj):\n    \"\"\"Return the JSON representation of a string object.\"\"\"\n    return json.dumps(my_obj)",
        "detail": "0x0B-python-input_output.3-to_json_string",
        "documentation": {}
    },
    {
        "label": "from_json_string",
        "kind": 2,
        "importPath": "0x0B-python-input_output.4-from_json_string",
        "description": "0x0B-python-input_output.4-from_json_string",
        "peekOfCode": "def from_json_string(my_str):\n    \"\"\"Return the Python object representation of a JSON string.\"\"\"\n    return json.loads(my_str)",
        "detail": "0x0B-python-input_output.4-from_json_string",
        "documentation": {}
    },
    {
        "label": "save_to_json_file",
        "kind": 2,
        "importPath": "0x0B-python-input_output.5-save_to_json_file",
        "description": "0x0B-python-input_output.5-save_to_json_file",
        "peekOfCode": "def save_to_json_file(my_obj, filename):\n    \"\"\"Write an object to a text file using JSON representation.\"\"\"\n    with open(filename, \"w\") as f:\n        json.dump(my_obj, f)",
        "detail": "0x0B-python-input_output.5-save_to_json_file",
        "documentation": {}
    },
    {
        "label": "load_from_json_file",
        "kind": 2,
        "importPath": "0x0B-python-input_output.6-load_from_json_file",
        "description": "0x0B-python-input_output.6-load_from_json_file",
        "peekOfCode": "def load_from_json_file(filename):\n    \"\"\"Create a Python object from a JSON file.\"\"\"\n    with open(filename) as f:\n        return json.load(f)",
        "detail": "0x0B-python-input_output.6-load_from_json_file",
        "documentation": {}
    },
    {
        "label": "save_to_json_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.7-add_item",
        "description": "0x0B-python-input_output.7-add_item",
        "peekOfCode": "save_to_json_file = __import__(\"5-save_to_json_file\").save_to_json_file\nload_from_json_file = __import__(\"6-load_from_json_file\").load_from_json_file\nfilename = \"add_item.json\"\ntry:\n    json_list = load_from_json_file(filename)\nexcept Exception:\n    json_list = []\nfor arg in argv[1:]:\n    json_list.append(arg)\nsave_to_json_file(json_list, filename)",
        "detail": "0x0B-python-input_output.7-add_item",
        "documentation": {}
    },
    {
        "label": "load_from_json_file",
        "kind": 5,
        "importPath": "0x0B-python-input_output.7-add_item",
        "description": "0x0B-python-input_output.7-add_item",
        "peekOfCode": "load_from_json_file = __import__(\"6-load_from_json_file\").load_from_json_file\nfilename = \"add_item.json\"\ntry:\n    json_list = load_from_json_file(filename)\nexcept Exception:\n    json_list = []\nfor arg in argv[1:]:\n    json_list.append(arg)\nsave_to_json_file(json_list, filename)",
        "detail": "0x0B-python-input_output.7-add_item",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "0x0B-python-input_output.7-add_item",
        "description": "0x0B-python-input_output.7-add_item",
        "peekOfCode": "filename = \"add_item.json\"\ntry:\n    json_list = load_from_json_file(filename)\nexcept Exception:\n    json_list = []\nfor arg in argv[1:]:\n    json_list.append(arg)\nsave_to_json_file(json_list, filename)",
        "detail": "0x0B-python-input_output.7-add_item",
        "documentation": {}
    },
    {
        "label": "class_to_json",
        "kind": 2,
        "importPath": "0x0B-python-input_output.8-class_to_json",
        "description": "0x0B-python-input_output.8-class_to_json",
        "peekOfCode": "def class_to_json(obj):\n    \"\"\"Return the dictionary represntation of a simple data structure.\"\"\"\n    return obj.__dict__",
        "detail": "0x0B-python-input_output.8-class_to_json",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "0x0B-python-input_output.9-student",
        "description": "0x0B-python-input_output.9-student",
        "peekOfCode": "class Student:\n    \"\"\"Represent a student.\"\"\"\n    def __init__(self, first_name, last_name, age):\n        \"\"\"Initialize a new Student.\n        Args:\n            first_name (str): The first name of the student.\n            last_name (str): The last name of the student.\n            age (int): The age of the student.\n        \"\"\"\n        self.first_name = first_name",
        "detail": "0x0B-python-input_output.9-student",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.models.base",
        "description": "0x0C-python-almost_a_circle.models.base",
        "peekOfCode": "class Base():\n    \"\"\"This class will be the “base” of all other classes in this project.\n    The goal is to manage id attribute in all our future classes\n    and to avoid duplicating the same code and same errors.\n    Attributes:\n        __nb_objects (int): the number of created Base objects.\n    \"\"\"\n    __nb_objects = 0\n    def __init__(self, id=None):\n        \"\"\"Initializes the default attributes of the Base object.",
        "detail": "0x0C-python-almost_a_circle.models.base",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.models.rectangle",
        "description": "0x0C-python-almost_a_circle.models.rectangle",
        "peekOfCode": "class Rectangle(Base):\n    \"\"\"This class inherits from Base and defines a Rectangle object.\n    Attributes:\n        __width (int): the width of the rectangle.\n        __height (int): the height of the rectangle.\n        __x (int): the horizontal (x) padding of the rectangle.\n        __y (int): the vertical (y) padding of the rectangle.\n    \"\"\"\n    def __init__(self, width, height, x=0, y=0, id=None):\n        \"\"\"Initializes the default attributes of the Base object.",
        "detail": "0x0C-python-almost_a_circle.models.rectangle",
        "documentation": {}
    },
    {
        "label": "Square",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.models.square",
        "description": "0x0C-python-almost_a_circle.models.square",
        "peekOfCode": "class Square(Rectangle):\n    \"\"\"This class inherits from Rectangle and defines a Square object.\"\"\"\n    def __init__(self, size, x=0, y=0, id=None):\n        \"\"\"Initializes the default attributes of the Base object.\n        Args:\n            size (int): the size of a square side.\n            x (int): the wanted horizontal (x) padding of the square.\n            y (int): the wanted vertical (y) padding of the square.\n            id (int): the wanted identifier of the Base object.\n        \"\"\"",
        "detail": "0x0C-python-almost_a_circle.models.square",
        "documentation": {}
    },
    {
        "label": "Test_Base_ID",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "peekOfCode": "class Test_Base_ID(TestCase):\n    \"\"\"Test cases for Base id.\"\"\"\n    def setUp(self):\n        Base._Base__nb_objects = 0\n    def test_ID_empty(self):\n        self.assertEqual(Base().id, 1)\n    def test_ID_none(self):\n        self.assertEqual(Base(None).id, 1)\n    def test_ID_positive(self):\n        self.assertEqual(Base(42).id, 42)",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "documentation": {}
    },
    {
        "label": "Test_Base_to_json_string",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "peekOfCode": "class Test_Base_to_json_string(TestCase):\n    \"\"\"Test cases for to_json_string static method.\"\"\"\n    def setUp(self):\n        Base._Base__nb_objects = 0\n    def test_to_json_string_type(self):\n        r = Rectangle(2, 4, 1, 2, 42)\n        s = Square(2, 1, 2, 42)\n        self.assertEqual(str, type(Base.to_json_string([r.to_dictionary()])))\n        self.assertEqual(str, type(Base.to_json_string([s.to_dictionary()])))\n    def test_to_json_string_basic_rectangle(self):",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "documentation": {}
    },
    {
        "label": "Test_Base_save_to_file",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "peekOfCode": "class Test_Base_save_to_file(TestCase):\n    \"\"\"Test cases for save_to_file static method.\"\"\"\n    def tearDown(self):\n        Base._Base__nb_objects = 0\n        try:\n            os.remove(\"Rectangle.json\")\n        except:\n            pass\n        try:\n            os.remove(\"Square.json\")",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "documentation": {}
    },
    {
        "label": "Test_Base_from_json_string",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "peekOfCode": "class Test_Base_from_json_string(TestCase):\n    \"\"\"Test cases for from_json_string static method.\"\"\"\n    def test_from_json_string_type(self):\n        list_input = [{'id': 89, 'width': 10, 'height': 4}]\n        json_list_input = Rectangle.to_json_string(list_input)\n        list_output = Rectangle.from_json_string(json_list_input)\n        self.assertEqual(list, type(list_output))\n    def test_from_json_string_basic_rectangle(self):\n        list_input = [{'id': 89, 'width': 10, 'height': 4}]\n        json_list_input = Rectangle.to_json_string(list_input)",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "documentation": {}
    },
    {
        "label": "Test_Base_create",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "peekOfCode": "class Test_Base_create(TestCase):\n    \"\"\"Test cases for create static method.\"\"\"\n    def test_create_basic_rectangle(self):\n        dct = {'width': 2, 'height': 4, 'x': 1, 'y': 2, 'id': 42}\n        r = Rectangle.create(**dct)\n        self.assertDictEqual(r.to_dictionary(), dct)\n    def test_create_basic_square(self):\n        dct = {'size': 2, 'x': 1, 'y': 2, 'id': 42}\n        s = Square.create(**dct)\n        self.assertDictEqual(s.to_dictionary(), dct)",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "documentation": {}
    },
    {
        "label": "Test_Base_load_from_file",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "peekOfCode": "class Test_Base_load_from_file(TestCase):\n    \"\"\"Test cases for load_from_file static method.\"\"\"\n    def tearDown(self):\n        Base._Base__nb_objects = 0\n        try:\n            os.remove(\"Rectangle.json\")\n        except:\n            pass\n        try:\n            os.remove(\"Square.json\")",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "documentation": {}
    },
    {
        "label": "Test_Base_save_to_file_csv",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "peekOfCode": "class Test_Base_save_to_file_csv(TestCase):\n    \"\"\"Test cases for save_to_file_csv static method.\"\"\"\n    def tearDown(self):\n        Base._Base__nb_objects = 0\n        try:\n            os.remove(\"Rectangle.csv\")\n        except:\n            pass\n        try:\n            os.remove(\"Square.csv\")",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "documentation": {}
    },
    {
        "label": "Test_Base_load_from_file_csv",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "peekOfCode": "class Test_Base_load_from_file_csv(TestCase):\n    \"\"\"Test cases for load_from_file_csv static method.\"\"\"\n    def tearDown(self):\n        Base._Base__nb_objects = 0\n        try:\n            os.remove(\"Rectangle.json\")\n        except:\n            pass\n        try:\n            os.remove(\"Square.json\")",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_base",
        "documentation": {}
    },
    {
        "label": "Test_Rectangle_basics",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "peekOfCode": "class Test_Rectangle_basics(TestCase):\n    \"\"\"Test cases for Rectangle initialization.\"\"\"\n    def setUp(self):\n        Base._Base__nb_objects = 0\n    def test_empty(self):\n        with self.assertRaises(TypeError):\n            Rectangle()\n    def test_one_arg_missing(self):\n        with self.assertRaises(TypeError):\n            Rectangle(1)",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "documentation": {}
    },
    {
        "label": "Test_Rectangle_values",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "peekOfCode": "class Test_Rectangle_values(TestCase):\n    \"\"\"Test cases for Rectangle input, getter and setter values validation.\"\"\"\n    types = [\n        None,\n        \"Betty Holberton\",\n        3.14,\n        2j,\n        [\"Betty\", \"Holberton\"],\n        (\"Betty\", \"Holberton\"),\n        range(42),",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "documentation": {}
    },
    {
        "label": "Test_Rectangle_area",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "peekOfCode": "class Test_Rectangle_area(TestCase):\n    \"\"\"Test cases for Rectangle's area method.\"\"\"\n    def test_area_basic(self):\n        self.assertEqual(Rectangle(2, 4).area(), 8)\n    def test_area_with_args(self):\n        with self.assertRaises(TypeError):\n            Rectangle(2, 4).area(42)\nclass Test_Rectangle_display(TestCase):\n    \"\"\"Test cases for Rectangle's display method.\"\"\"\n    def test_display_basic(self):",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "documentation": {}
    },
    {
        "label": "Test_Rectangle_display",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "peekOfCode": "class Test_Rectangle_display(TestCase):\n    \"\"\"Test cases for Rectangle's display method.\"\"\"\n    def test_display_basic(self):\n        with mock.patch('sys.stdout', new=StringIO()) as output:\n            Rectangle(2, 4).display()\n            self.assertEqual(output.getvalue(), '##\\n##\\n##\\n##\\n')\n    def test_display_with_x(self):\n        with mock.patch('sys.stdout', new=StringIO()) as output:\n            Rectangle(2, 4, 2).display()\n            self.assertEqual(output.getvalue(), '  ##\\n  ##\\n  ##\\n  ##\\n')",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "documentation": {}
    },
    {
        "label": "Test_Rectangle_str",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "peekOfCode": "class Test_Rectangle_str(TestCase):\n    \"\"\"Test cases for Rectangle's __str__ method.\"\"\"\n    def setUp(self):\n        Base._Base__nb_objects = 0\n    def test_str_print(self):\n        expected = \"[Rectangle] (42) 1/3 - 2/4\"\n        with mock.patch('sys.stdout', new=StringIO()) as output:\n            print(Rectangle(2, 4, 1, 3, 42), end='')\n            self.assertEqual(output.getvalue(), expected)\n    def test_str_str_method(self):",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "documentation": {}
    },
    {
        "label": "Test_Rectangle_update_with_args",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "peekOfCode": "class Test_Rectangle_update_with_args(TestCase):\n    \"\"\"Test cases for Rectangle's update with *args method.\"\"\"\n    def setUp(self):\n        Base._Base__nb_objects = 0\n    def test_update_no_args(self):\n        r = Rectangle(2, 4, 1, 2, 42)\n        r.update()\n        self.assertEqual(str(r), \"[Rectangle] (42) 1/2 - 2/4\")\n    def test_update_args_none_id(self):\n        r = Rectangle(2, 4, 1, 2, 42)",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "documentation": {}
    },
    {
        "label": "Test_Rectangle_update_with_kwargs",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "peekOfCode": "class Test_Rectangle_update_with_kwargs(TestCase):\n    \"\"\"Test cases for Rectangle's update with **kwargs method.\"\"\"\n    def setUp(self):\n        Base._Base__nb_objects = 0\n    def test_update_kwargs_none_id(self):\n        r = Rectangle(2, 4, 1, 2, 42)\n        r.update(id=None)\n        self.assertEqual(str(r), \"[Rectangle] (1) 1/2 - 2/4\")\n    def test_update_kwargs_id(self):\n        r = Rectangle(2, 4, 1, 2, 42)",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "documentation": {}
    },
    {
        "label": "Test_Rectangle_to_dict",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "peekOfCode": "class Test_Rectangle_to_dict(TestCase):\n    \"\"\"Test cases for Rectangle's to_dictionary method.\"\"\"\n    def test_to_dictionary_basic(self):\n        r = Rectangle(2, 4, 1, 2, 42)\n        expected = {'width': 2, 'height': 4, 'x': 1, 'y': 2, 'id': 42}\n        self.assertDictEqual(r.to_dictionary(), expected)\n    def test_to_dictionary_basic_with_args(self):\n        with self.assertRaises(TypeError):\n            Rectangle(2, 4, 1, 2, 42).to_dictionary(42)\nif __name__ == \"__main__\":",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_rectangle",
        "documentation": {}
    },
    {
        "label": "Test_Square_basics",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "peekOfCode": "class Test_Square_basics(TestCase):\n    \"\"\"Test cases for Square initialization.\"\"\"\n    def setUp(self):\n        Base._Base__nb_objects = 0\n    def test_empty(self):\n        with self.assertRaises(TypeError):\n            Square()\n    def test_too_many_args(self):\n        with self.assertRaises(TypeError):\n            Square(1, 2, 3, 4, 5)",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "documentation": {}
    },
    {
        "label": "Test_Square_values",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "peekOfCode": "class Test_Square_values(TestCase):\n    \"\"\"Test cases for Square input, getter and setter values validation.\"\"\"\n    types = [\n        None,\n        \"Betty Holberton\",\n        3.14,\n        2j,\n        [\"Betty\", \"Holberton\"],\n        (\"Betty\", \"Holberton\"),\n        range(42),",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "documentation": {}
    },
    {
        "label": "Test_Square_area",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "peekOfCode": "class Test_Square_area(TestCase):\n    \"\"\"Test cases for Square's area method.\"\"\"\n    def test_area_basic(self):\n        self.assertEqual(Square(2).area(), 4)\n    def test_area_with_args(self):\n        with self.assertRaises(TypeError):\n            Square(2).area(42)\nclass Test_Square_display(TestCase):\n    \"\"\"Test cases for Square's display method.\"\"\"\n    def test_display_basic(self):",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "documentation": {}
    },
    {
        "label": "Test_Square_display",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "peekOfCode": "class Test_Square_display(TestCase):\n    \"\"\"Test cases for Square's display method.\"\"\"\n    def test_display_basic(self):\n        with mock.patch('sys.stdout', new=StringIO()) as output:\n            Square(2).display()\n            self.assertEqual(output.getvalue(), '##\\n##\\n')\n    def test_display_with_x(self):\n        with mock.patch('sys.stdout', new=StringIO()) as output:\n            Square(2, 2).display()\n            self.assertEqual(output.getvalue(), '  ##\\n  ##\\n')",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "documentation": {}
    },
    {
        "label": "Test_Square_str",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "peekOfCode": "class Test_Square_str(TestCase):\n    \"\"\"Test cases for Square's __str__ method.\"\"\"\n    def setUp(self):\n        Base._Base__nb_objects = 0\n    def test_str_print(self):\n        expected = \"[Square] (42) 1/3 - 2\"\n        with mock.patch('sys.stdout', new=StringIO()) as output:\n            print(Square(2, 1, 3, 42), end='')\n            self.assertEqual(output.getvalue(), expected)\n    def test_str_str_method(self):",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "documentation": {}
    },
    {
        "label": "Test_Square_update_with_args",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "peekOfCode": "class Test_Square_update_with_args(TestCase):\n    \"\"\"Test cases for Square's update with *args method.\"\"\"\n    def setUp(self):\n        Base._Base__nb_objects = 0\n    def test_update_no_args(self):\n        s = Square(2, 1, 2, 42)\n        s.update()\n        self.assertEqual(str(s), \"[Square] (42) 1/2 - 2\")\n    def test_update_args_none_id(self):\n        s = Square(2, 1, 2, 42)",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "documentation": {}
    },
    {
        "label": "Test_Square_update_with_kwargs",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "peekOfCode": "class Test_Square_update_with_kwargs(TestCase):\n    \"\"\"Test cases for Square's update with **kwargs method.\"\"\"\n    def setUp(self):\n        Base._Base__nb_objects = 0\n    def test_update_kwargs_none_id(self):\n        s = Square(2, 1, 2, 42)\n        s.update(id=None)\n        self.assertEqual(str(s), \"[Square] (1) 1/2 - 2\")\n    def test_update_kwargs_id(self):\n        s = Square(2, 1, 2, 42)",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "documentation": {}
    },
    {
        "label": "Test_Square_to_dict",
        "kind": 6,
        "importPath": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "description": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "peekOfCode": "class Test_Square_to_dict(TestCase):\n    \"\"\"Test cases for Square's to_dictionary method.\"\"\"\n    def test_to_dictionary_basic(self):\n        s = Square(2, 1, 2, 42)\n        expected = {'size': 2, 'x': 1, 'y': 2, 'id': 42}\n        self.assertDictEqual(s.to_dictionary(), expected)\n    def test_to_dictionary_basic_with_args(self):\n        with self.assertRaises(TypeError):\n            Square(2, 1, 2, 42).to_dictionary(42)\nif __name__ == \"__main__\":",
        "detail": "0x0C-python-almost_a_circle.tests.test_models.test_square",
        "documentation": {}
    },
    {
        "label": "City",
        "kind": 6,
        "importPath": "0x0F-python-object_relational_mapping.model_city",
        "description": "0x0F-python-object_relational_mapping.model_city",
        "peekOfCode": "class City(Base):\n    \"\"\"This class links to the `cities` table of our database.\n    Attributes:\n        id (int): id of the city.\n        name (str): name of the city.\n        state_id (int): id of the associated state.\n    \"\"\"\n    __tablename__ = 'cities'\n    id = Column(Integer, autoincrement=True, nullable=False, primary_key=True)\n    name = Column(String(128), nullable=False)",
        "detail": "0x0F-python-object_relational_mapping.model_city",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "0x0F-python-object_relational_mapping.model_state",
        "description": "0x0F-python-object_relational_mapping.model_state",
        "peekOfCode": "class State(Base):\n    \"\"\"Representation of a state\"\"\"\n    __tablename__ = 'states'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(128), nullable=False)",
        "detail": "0x0F-python-object_relational_mapping.model_state",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "0x0F-python-object_relational_mapping.model_state",
        "description": "0x0F-python-object_relational_mapping.model_state",
        "peekOfCode": "Base = declarative_base()\nclass State(Base):\n    \"\"\"Representation of a state\"\"\"\n    __tablename__ = 'states'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(128), nullable=False)",
        "detail": "0x0F-python-object_relational_mapping.model_state",
        "documentation": {}
    },
    {
        "label": "City",
        "kind": 6,
        "importPath": "0x0F-python-object_relational_mapping.relationship_city",
        "description": "0x0F-python-object_relational_mapping.relationship_city",
        "peekOfCode": "class City(Base):\n    \"\"\"This class links to the `cities` table of our database.\n    Attributes:\n        id (int): id of the city.\n        name (str): name of the city.\n        state_id (int): id of the associated state.\n    \"\"\"\n    __tablename__ = 'cities'\n    id = Column(Integer, autoincrement=True, nullable=False, primary_key=True)\n    name = Column(String(128), nullable=False)",
        "detail": "0x0F-python-object_relational_mapping.relationship_city",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "0x0F-python-object_relational_mapping.relationship_state",
        "description": "0x0F-python-object_relational_mapping.relationship_state",
        "peekOfCode": "class State(Base):\n    \"\"\"This class links to the `states` table of our database.\n    Attributes:\n        id (int): id of the state.\n        name (str): name of the state.\n    \"\"\"\n    __tablename__ = 'states'\n    id = Column(Integer, autoincrement=True, nullable=False, primary_key=True)\n    name = Column(String(128), nullable=False)\n    cities = relationship(\"City\", cascade=\"all, delete\", backref=\"state\")",
        "detail": "0x0F-python-object_relational_mapping.relationship_state",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "0x0F-python-object_relational_mapping.relationship_state",
        "description": "0x0F-python-object_relational_mapping.relationship_state",
        "peekOfCode": "Base = declarative_base()\nclass State(Base):\n    \"\"\"This class links to the `states` table of our database.\n    Attributes:\n        id (int): id of the state.\n        name (str): name of the state.\n    \"\"\"\n    __tablename__ = 'states'\n    id = Column(Integer, autoincrement=True, nullable=False, primary_key=True)\n    name = Column(String(128), nullable=False)",
        "detail": "0x0F-python-object_relational_mapping.relationship_state",
        "documentation": {}
    }
]